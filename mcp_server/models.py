# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:41:34+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ArchivalReason(RootModel[str]):
    root: str


class AttributeAction(Enum):
    ADD = 'ADD'
    PUT = 'PUT'
    DELETE = 'DELETE'


class AttributeName(RootModel[constr(max_length=65535)]):
    root: constr(max_length=65535)


class AttributeNameList(RootModel[List[AttributeName]]):
    root: List[AttributeName] = Field(..., min_length=1)


class AutoScalingPolicyName(
    RootModel[constr(pattern=r'\p{Print}+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'\p{Print}+', min_length=1, max_length=256)


class AutoScalingRoleArn(RootModel[constr(min_length=1, max_length=1600)]):
    root: constr(min_length=1, max_length=1600)


class Backfilling(RootModel[bool]):
    root: bool


class BackupArn(RootModel[constr(min_length=37, max_length=1024)]):
    root: constr(min_length=37, max_length=1024)


class BackupCreationDateTime(RootModel[datetime]):
    root: datetime


class BackupInUseException(RootModel[Any]):
    root: Any


class BackupName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=3, max_length=255)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=3, max_length=255)


class BackupNotFoundException(RootModel[Any]):
    root: Any


class BackupSizeBytes(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class BackupStatus(Enum):
    CREATING = 'CREATING'
    DELETED = 'DELETED'
    AVAILABLE = 'AVAILABLE'


class BackupType(Enum):
    USER = 'USER'
    SYSTEM = 'SYSTEM'
    AWS_BACKUP = 'AWS_BACKUP'


class BackupTypeFilter(Enum):
    USER = 'USER'
    SYSTEM = 'SYSTEM'
    AWS_BACKUP = 'AWS_BACKUP'
    ALL = 'ALL'


class BackupsInputLimit(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class BatchStatementErrorCodeEnum(Enum):
    ConditionalCheckFailed = 'ConditionalCheckFailed'
    ItemCollectionSizeLimitExceeded = 'ItemCollectionSizeLimitExceeded'
    RequestLimitExceeded = 'RequestLimitExceeded'
    ValidationError = 'ValidationError'
    ProvisionedThroughputExceeded = 'ProvisionedThroughputExceeded'
    TransactionConflict = 'TransactionConflict'
    ThrottlingError = 'ThrottlingError'
    InternalServerError = 'InternalServerError'
    ResourceNotFound = 'ResourceNotFound'
    AccessDenied = 'AccessDenied'
    DuplicateItem = 'DuplicateItem'


class BilledSizeBytes(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class BillingMode(Enum):
    PROVISIONED = 'PROVISIONED'
    PAY_PER_REQUEST = 'PAY_PER_REQUEST'


class BinaryAttributeValue(RootModel[str]):
    root: str


class BinarySetAttributeValue(RootModel[List[BinaryAttributeValue]]):
    root: List[BinaryAttributeValue]


class BooleanAttributeValue(RootModel[bool]):
    root: bool


class BooleanObject(RootModel[bool]):
    root: bool


class ClientRequestToken(RootModel[constr(min_length=1, max_length=36)]):
    root: constr(min_length=1, max_length=36)


class ClientToken(RootModel[constr(pattern=r'^[^\$]+$')]):
    root: constr(pattern=r'^[^\$]+$')


class CloudWatchLogGroupArn(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ComparisonOperator(Enum):
    EQ = 'EQ'
    NE = 'NE'
    IN = 'IN'
    LE = 'LE'
    LT = 'LT'
    GE = 'GE'
    GT = 'GT'
    BETWEEN = 'BETWEEN'
    NOT_NULL = 'NOT_NULL'
    NULL = 'NULL'
    CONTAINS = 'CONTAINS'
    NOT_CONTAINS = 'NOT_CONTAINS'
    BEGINS_WITH = 'BEGINS_WITH'


class ConditionExpression(RootModel[str]):
    root: str


class ConditionalCheckFailedException(RootModel[Any]):
    root: Any


class ConditionalOperator(Enum):
    AND = 'AND'
    OR = 'OR'


class ConsistentRead(RootModel[bool]):
    root: bool


class ConsumedCapacityUnits(RootModel[float]):
    root: float


class ContinuousBackupsStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class ContinuousBackupsUnavailableException(RootModel[Any]):
    root: Any


class ContributorInsightsAction(Enum):
    ENABLE = 'ENABLE'
    DISABLE = 'DISABLE'


class ContributorInsightsRule(
    RootModel[constr(pattern=r'[A-Za-z0-9][A-Za-z0-9\-\_\.]{0,126}[A-Za-z0-9]')]
):
    root: constr(pattern=r'[A-Za-z0-9][A-Za-z0-9\-\_\.]{0,126}[A-Za-z0-9]')


class ContributorInsightsRuleList(RootModel[List[ContributorInsightsRule]]):
    root: List[ContributorInsightsRule]


class ContributorInsightsStatus(Enum):
    ENABLING = 'ENABLING'
    ENABLED = 'ENABLED'
    DISABLING = 'DISABLING'
    DISABLED = 'DISABLED'
    FAILED = 'FAILED'


class CsvDelimiter(RootModel[constr(pattern=r'[,;:|\t ]', min_length=1, max_length=1)]):
    root: constr(pattern=r'[,;:|\t ]', min_length=1, max_length=1)


class CsvHeader(
    RootModel[
        constr(
            pattern=r'[\x20-\x21\x23-\x2B\x2D-\x7E]*', min_length=1, max_length=65536
        )
    ]
):
    root: constr(
        pattern=r'[\x20-\x21\x23-\x2B\x2D-\x7E]*', min_length=1, max_length=65536
    )


class CsvHeaderList(RootModel[List[CsvHeader]]):
    root: List[CsvHeader] = Field(..., max_length=255, min_length=1)


class CsvOptions(BaseModel):
    Delimiter: Optional[CsvDelimiter] = None
    HeaderList: Optional[CsvHeaderList] = None


class Date(RootModel[datetime]):
    root: datetime


class DeleteBackupInput(BaseModel):
    BackupArn_1: BackupArn = Field(..., alias='BackupArn')


class DeletionProtectionEnabled(RootModel[bool]):
    root: bool


class DescribeBackupInput(BaseModel):
    BackupArn_1: BackupArn = Field(..., alias='BackupArn')


class DescribeEndpointsRequest(BaseModel):
    pass


class DescribeLimitsInput(BaseModel):
    pass


class DestinationStatus(Enum):
    ENABLING = 'ENABLING'
    ACTIVE = 'ACTIVE'
    DISABLING = 'DISABLING'
    DISABLED = 'DISABLED'
    ENABLE_FAILED = 'ENABLE_FAILED'


class DoubleObject(RootModel[float]):
    root: float


class DuplicateItemException(RootModel[Any]):
    root: Any


class ErrorCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ExceptionDescription(RootModel[str]):
    root: str


class ExceptionName(RootModel[str]):
    root: str


class ExportArn(RootModel[constr(min_length=37, max_length=1024)]):
    root: constr(min_length=37, max_length=1024)


class ExportConflictException(RootModel[Any]):
    root: Any


class ExportEndTime(RootModel[datetime]):
    root: datetime


class ExportFormat(Enum):
    DYNAMODB_JSON = 'DYNAMODB_JSON'
    ION = 'ION'


class ExportManifest(RootModel[str]):
    root: str


class ExportNextToken(RootModel[str]):
    root: str


class ExportNotFoundException(RootModel[Any]):
    root: Any


class ExportStartTime(RootModel[datetime]):
    root: datetime


class ExportStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class ExportSummary(BaseModel):
    ExportArn_1: Optional[ExportArn] = Field(None, alias='ExportArn')
    ExportStatus_1: Optional[ExportStatus] = Field(None, alias='ExportStatus')


class ExportTime(RootModel[datetime]):
    root: datetime


class ExpressionAttributeNameMap(RootModel[Optional[Dict[str, AttributeName]]]):
    root: Optional[Dict[str, AttributeName]] = None


class ExpressionAttributeNameVariable(RootModel[str]):
    root: str


class ExpressionAttributeValueVariable(RootModel[str]):
    root: str


class FailureCode(RootModel[str]):
    root: str


class FailureException(BaseModel):
    ExceptionDescription_1: Optional[ExceptionDescription] = Field(
        None, alias='ExceptionDescription'
    )
    ExceptionName_1: Optional[ExceptionName] = Field(None, alias='ExceptionName')


class FailureMessage(RootModel[str]):
    root: str


class GlobalTableAlreadyExistsException(RootModel[Any]):
    root: Any


class GlobalTableArnString(RootModel[str]):
    root: str


class GlobalTableNotFoundException(RootModel[Any]):
    root: Any


class GlobalTableStatus(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'


class IdempotentParameterMismatchException(RootModel[Any]):
    root: Any


class ImportArn(RootModel[constr(min_length=37, max_length=1024)]):
    root: constr(min_length=37, max_length=1024)


class ImportConflictException(RootModel[Any]):
    root: Any


class ImportEndTime(RootModel[datetime]):
    root: datetime


class ImportNextToken(
    RootModel[constr(pattern=r'([0-9a-f]{16})+', min_length=112, max_length=1024)]
):
    root: constr(pattern=r'([0-9a-f]{16})+', min_length=112, max_length=1024)


class ImportNotFoundException(RootModel[Any]):
    root: Any


class ImportStartTime(RootModel[datetime]):
    root: datetime


class ImportStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'
    FAILED = 'FAILED'


class ImportedItemCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class IndexName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=3, max_length=255)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=3, max_length=255)


class IndexNotFoundException(RootModel[Any]):
    root: Any


class IndexStatus(Enum):
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    ACTIVE = 'ACTIVE'


class InputCompressionType(Enum):
    GZIP = 'GZIP'
    ZSTD = 'ZSTD'
    NONE = 'NONE'


class InputFormat(Enum):
    DYNAMODB_JSON = 'DYNAMODB_JSON'
    ION = 'ION'
    CSV = 'CSV'


class InputFormatOptions(BaseModel):
    Csv: Optional[CsvOptions] = None


class Integer(RootModel[int]):
    root: int


class IntegerObject(RootModel[int]):
    root: int


class InternalServerError(RootModel[Any]):
    root: Any


class InvalidExportTimeException(RootModel[Any]):
    root: Any


class InvalidRestoreTimeException(RootModel[Any]):
    root: Any


class ItemCollectionSizeEstimateBound(RootModel[float]):
    root: float


class ItemCollectionSizeEstimateRange(RootModel[List[ItemCollectionSizeEstimateBound]]):
    root: List[ItemCollectionSizeEstimateBound]


class ItemCollectionSizeLimitExceededException(RootModel[Any]):
    root: Any


class ItemCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class KMSMasterKeyArn(RootModel[str]):
    root: str


class KMSMasterKeyId(RootModel[str]):
    root: str


class KeyExpression(RootModel[str]):
    root: str


class KeySchemaAttributeName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class KeyType(Enum):
    HASH = 'HASH'
    RANGE = 'RANGE'


class LastUpdateDateTime(RootModel[datetime]):
    root: datetime


class LimitExceededException(RootModel[Any]):
    root: Any


class ListContributorInsightsLimit(RootModel[conint(le=100)]):
    root: conint(le=100)


class ListExportsMaxLimit(RootModel[conint(ge=1, le=25)]):
    root: conint(ge=1, le=25)


class ListImportsMaxLimit(RootModel[conint(ge=1, le=25)]):
    root: conint(ge=1, le=25)


class ListTablesInputLimit(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class Long(RootModel[int]):
    root: int


class LongObject(RootModel[int]):
    root: int


class NextTokenString(RootModel[str]):
    root: str


class NonKeyAttributeName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class NonKeyAttributeNameList(RootModel[List[NonKeyAttributeName]]):
    root: List[NonKeyAttributeName] = Field(..., max_length=20, min_length=1)


class NonNegativeLongObject(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class NullAttributeValue(RootModel[bool]):
    root: bool


class NumberAttributeValue(RootModel[str]):
    root: str


class NumberSetAttributeValue(RootModel[List[NumberAttributeValue]]):
    root: List[NumberAttributeValue]


class PartiQLNextToken(RootModel[constr(min_length=1, max_length=32768)]):
    root: constr(min_length=1, max_length=32768)


class PartiQLStatement(RootModel[constr(min_length=1, max_length=8192)]):
    root: constr(min_length=1, max_length=8192)


class PointInTimeRecoverySpecification(BaseModel):
    PointInTimeRecoveryEnabled: BooleanObject


class PointInTimeRecoveryStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class PointInTimeRecoveryUnavailableException(RootModel[Any]):
    root: Any


class PositiveIntegerObject(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PositiveLongObject(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class ProcessedItemCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ProjectionExpression(RootModel[str]):
    root: str


class ProjectionType(Enum):
    ALL = 'ALL'
    KEYS_ONLY = 'KEYS_ONLY'
    INCLUDE = 'INCLUDE'


class ProvisionedThroughput(BaseModel):
    ReadCapacityUnits: PositiveLongObject
    WriteCapacityUnits: PositiveLongObject


class ProvisionedThroughputDescription(BaseModel):
    LastDecreaseDateTime: Optional[Date] = None
    LastIncreaseDateTime: Optional[Date] = None
    NumberOfDecreasesToday: Optional[PositiveLongObject] = None
    ReadCapacityUnits: Optional[NonNegativeLongObject] = None
    WriteCapacityUnits: Optional[NonNegativeLongObject] = None


class ProvisionedThroughputExceededException(RootModel[Any]):
    root: Any


class ProvisionedThroughputOverride(BaseModel):
    ReadCapacityUnits: Optional[PositiveLongObject] = None


class RegionName(RootModel[str]):
    root: str


class Replica(BaseModel):
    RegionName_1: Optional[RegionName] = Field(None, alias='RegionName')


class ReplicaAlreadyExistsException(RootModel[Any]):
    root: Any


class ReplicaGlobalSecondaryIndex(BaseModel):
    IndexName_1: IndexName = Field(..., alias='IndexName')
    ProvisionedThroughputOverride_1: Optional[ProvisionedThroughputOverride] = Field(
        None, alias='ProvisionedThroughputOverride'
    )


class ReplicaGlobalSecondaryIndexDescription(BaseModel):
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    ProvisionedThroughputOverride_1: Optional[ProvisionedThroughputOverride] = Field(
        None, alias='ProvisionedThroughputOverride'
    )


class ReplicaGlobalSecondaryIndexDescriptionList(
    RootModel[List[ReplicaGlobalSecondaryIndexDescription]]
):
    root: List[ReplicaGlobalSecondaryIndexDescription]


class ReplicaGlobalSecondaryIndexList(RootModel[List[ReplicaGlobalSecondaryIndex]]):
    root: List[ReplicaGlobalSecondaryIndex] = Field(..., min_length=1)


class ReplicaList(RootModel[List[Replica]]):
    root: List[Replica]


class ReplicaNotFoundException(RootModel[Any]):
    root: Any


class ReplicaStatus(Enum):
    CREATING = 'CREATING'
    CREATION_FAILED = 'CREATION_FAILED'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    ACTIVE = 'ACTIVE'
    REGION_DISABLED = 'REGION_DISABLED'
    INACCESSIBLE_ENCRYPTION_CREDENTIALS = 'INACCESSIBLE_ENCRYPTION_CREDENTIALS'


class ReplicaStatusDescription(RootModel[str]):
    root: str


class ReplicaStatusPercentProgress(RootModel[str]):
    root: str


class RequestLimitExceeded(RootModel[Any]):
    root: Any


class ResourceArnString(RootModel[constr(min_length=1, max_length=1283)]):
    root: constr(min_length=1, max_length=1283)


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RestoreInProgress(RootModel[bool]):
    root: bool


class ReturnConsumedCapacity(Enum):
    INDEXES = 'INDEXES'
    TOTAL = 'TOTAL'
    NONE = 'NONE'


class ReturnItemCollectionMetrics(Enum):
    SIZE = 'SIZE'
    NONE = 'NONE'


class ReturnValue(Enum):
    NONE = 'NONE'
    ALL_OLD = 'ALL_OLD'
    UPDATED_OLD = 'UPDATED_OLD'
    ALL_NEW = 'ALL_NEW'
    UPDATED_NEW = 'UPDATED_NEW'


class ReturnValuesOnConditionCheckFailure(Enum):
    ALL_OLD = 'ALL_OLD'
    NONE = 'NONE'


class S3Bucket(
    RootModel[constr(pattern=r'^[a-z0-9A-Z]+[\.\-\w]*[a-z0-9A-Z]+$', max_length=255)]
):
    root: constr(pattern=r'^[a-z0-9A-Z]+[\.\-\w]*[a-z0-9A-Z]+$', max_length=255)


class S3BucketOwner(RootModel[constr(pattern=r'[0-9]{12}')]):
    root: constr(pattern=r'[0-9]{12}')


class S3Prefix(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class S3SseAlgorithm(Enum):
    AES256 = 'AES256'
    KMS = 'KMS'


class S3SseKmsKeyId(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class SSEEnabled(RootModel[bool]):
    root: bool


class SSEStatus(Enum):
    ENABLING = 'ENABLING'
    ENABLED = 'ENABLED'
    DISABLING = 'DISABLING'
    DISABLED = 'DISABLED'
    UPDATING = 'UPDATING'


class SSEType(Enum):
    AES256 = 'AES256'
    KMS = 'KMS'


class ScalarAttributeType(Enum):
    S = 'S'
    N = 'N'
    B = 'B'


class ScanSegment(RootModel[conint(ge=0, le=999999)]):
    root: conint(ge=0, le=999999)


class ScanTotalSegments(RootModel[conint(ge=1, le=1000000)]):
    root: conint(ge=1, le=1000000)


class Select(Enum):
    ALL_ATTRIBUTES = 'ALL_ATTRIBUTES'
    ALL_PROJECTED_ATTRIBUTES = 'ALL_PROJECTED_ATTRIBUTES'
    SPECIFIC_ATTRIBUTES = 'SPECIFIC_ATTRIBUTES'
    COUNT = 'COUNT'


class StreamArn(RootModel[constr(min_length=37, max_length=1024)]):
    root: constr(min_length=37, max_length=1024)


class StreamEnabled(RootModel[bool]):
    root: bool


class StreamViewType(Enum):
    NEW_IMAGE = 'NEW_IMAGE'
    OLD_IMAGE = 'OLD_IMAGE'
    NEW_AND_OLD_IMAGES = 'NEW_AND_OLD_IMAGES'
    KEYS_ONLY = 'KEYS_ONLY'


class String(RootModel[str]):
    root: str


class StringAttributeValue(RootModel[str]):
    root: str


class StringSetAttributeValue(RootModel[List[StringAttributeValue]]):
    root: List[StringAttributeValue]


class TableAlreadyExistsException(RootModel[Any]):
    root: Any


class TableArn(RootModel[str]):
    root: str


class TableClass(Enum):
    STANDARD = 'STANDARD'
    STANDARD_INFREQUENT_ACCESS = 'STANDARD_INFREQUENT_ACCESS'


class TableClassSummary(BaseModel):
    LastUpdateDateTime: Optional[Date] = None
    TableClass_1: Optional[TableClass] = Field(None, alias='TableClass')


class TableCreationDateTime(RootModel[datetime]):
    root: datetime


class TableId(
    RootModel[
        constr(pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')
    ]
):
    root: constr(
        pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    )


class TableInUseException(RootModel[Any]):
    root: Any


class TableName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=3, max_length=255)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=3, max_length=255)


class TableNameList(RootModel[List[TableName]]):
    root: List[TableName]


class TableNotFoundException(RootModel[Any]):
    root: Any


class TableStatus(Enum):
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    ACTIVE = 'ACTIVE'
    INACCESSIBLE_ENCRYPTION_CREDENTIALS = 'INACCESSIBLE_ENCRYPTION_CREDENTIALS'
    ARCHIVING = 'ARCHIVING'
    ARCHIVED = 'ARCHIVED'


class TagKeyString(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagValueString(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TimeRangeLowerBound(RootModel[datetime]):
    root: datetime


class TimeRangeUpperBound(RootModel[datetime]):
    root: datetime


class TimeToLiveAttributeName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class TimeToLiveEnabled(RootModel[bool]):
    root: bool


class TimeToLiveSpecification(BaseModel):
    AttributeName: TimeToLiveAttributeName
    Enabled: TimeToLiveEnabled


class TimeToLiveStatus(Enum):
    ENABLING = 'ENABLING'
    DISABLING = 'DISABLING'
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class TransactionCanceledException(RootModel[Any]):
    root: Any


class TransactionConflictException(RootModel[Any]):
    root: Any


class TransactionInProgressException(RootModel[Any]):
    root: Any


class UpdateContinuousBackupsInput(BaseModel):
    PointInTimeRecoverySpecification_1: PointInTimeRecoverySpecification = Field(
        ..., alias='PointInTimeRecoverySpecification'
    )
    TableName_1: TableName = Field(..., alias='TableName')


class UpdateContributorInsightsInput(BaseModel):
    ContributorInsightsAction_1: ContributorInsightsAction = Field(
        ..., alias='ContributorInsightsAction'
    )
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    TableName_1: TableName = Field(..., alias='TableName')


class UpdateContributorInsightsOutput(BaseModel):
    ContributorInsightsStatus_1: Optional[ContributorInsightsStatus] = Field(
        None, alias='ContributorInsightsStatus'
    )
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    TableName_1: Optional[TableName] = Field(None, alias='TableName')


class UpdateExpression(RootModel[str]):
    root: str


class UpdateGlobalSecondaryIndexAction(BaseModel):
    IndexName_1: IndexName = Field(..., alias='IndexName')
    ProvisionedThroughput_1: ProvisionedThroughput = Field(
        ..., alias='ProvisionedThroughput'
    )


class UpdateReplicationGroupMemberAction(BaseModel):
    GlobalSecondaryIndexes: Optional[ReplicaGlobalSecondaryIndexList] = None
    KMSMasterKeyId_1: Optional[KMSMasterKeyId] = Field(None, alias='KMSMasterKeyId')
    ProvisionedThroughputOverride_1: Optional[ProvisionedThroughputOverride] = Field(
        None, alias='ProvisionedThroughputOverride'
    )
    RegionName_1: RegionName = Field(..., alias='RegionName')
    TableClassOverride: Optional[TableClass] = None


class UpdateTimeToLiveInput(BaseModel):
    TableName_1: TableName = Field(..., alias='TableName')
    TimeToLiveSpecification_1: TimeToLiveSpecification = Field(
        ..., alias='TimeToLiveSpecification'
    )


class UpdateTimeToLiveOutput(BaseModel):
    TimeToLiveSpecification_1: Optional[TimeToLiveSpecification] = Field(
        None, alias='TimeToLiveSpecification'
    )


class XAmzTarget(Enum):
    DynamoDB_20120810_BatchExecuteStatement = 'DynamoDB_20120810.BatchExecuteStatement'


class XAmzTarget1(Enum):
    DynamoDB_20120810_BatchGetItem = 'DynamoDB_20120810.BatchGetItem'


class XAmzTarget2(Enum):
    DynamoDB_20120810_BatchWriteItem = 'DynamoDB_20120810.BatchWriteItem'


class XAmzTarget3(Enum):
    DynamoDB_20120810_CreateBackup = 'DynamoDB_20120810.CreateBackup'


class XAmzTarget4(Enum):
    DynamoDB_20120810_CreateGlobalTable = 'DynamoDB_20120810.CreateGlobalTable'


class XAmzTarget5(Enum):
    DynamoDB_20120810_CreateTable = 'DynamoDB_20120810.CreateTable'


class XAmzTarget6(Enum):
    DynamoDB_20120810_DeleteBackup = 'DynamoDB_20120810.DeleteBackup'


class XAmzTarget7(Enum):
    DynamoDB_20120810_DeleteItem = 'DynamoDB_20120810.DeleteItem'


class XAmzTarget8(Enum):
    DynamoDB_20120810_DeleteTable = 'DynamoDB_20120810.DeleteTable'


class XAmzTarget9(Enum):
    DynamoDB_20120810_DescribeBackup = 'DynamoDB_20120810.DescribeBackup'


class XAmzTarget10(Enum):
    DynamoDB_20120810_DescribeContinuousBackups = (
        'DynamoDB_20120810.DescribeContinuousBackups'
    )


class XAmzTarget11(Enum):
    DynamoDB_20120810_DescribeContributorInsights = (
        'DynamoDB_20120810.DescribeContributorInsights'
    )


class XAmzTarget12(Enum):
    DynamoDB_20120810_DescribeEndpoints = 'DynamoDB_20120810.DescribeEndpoints'


class XAmzTarget13(Enum):
    DynamoDB_20120810_DescribeExport = 'DynamoDB_20120810.DescribeExport'


class XAmzTarget14(Enum):
    DynamoDB_20120810_DescribeGlobalTable = 'DynamoDB_20120810.DescribeGlobalTable'


class XAmzTarget15(Enum):
    DynamoDB_20120810_DescribeGlobalTableSettings = (
        'DynamoDB_20120810.DescribeGlobalTableSettings'
    )


class XAmzTarget16(Enum):
    DynamoDB_20120810_DescribeImport = 'DynamoDB_20120810.DescribeImport'


class XAmzTarget17(Enum):
    DynamoDB_20120810_DescribeKinesisStreamingDestination = (
        'DynamoDB_20120810.DescribeKinesisStreamingDestination'
    )


class XAmzTarget18(Enum):
    DynamoDB_20120810_DescribeLimits = 'DynamoDB_20120810.DescribeLimits'


class XAmzTarget19(Enum):
    DynamoDB_20120810_DescribeTable = 'DynamoDB_20120810.DescribeTable'


class XAmzTarget20(Enum):
    DynamoDB_20120810_DescribeTableReplicaAutoScaling = (
        'DynamoDB_20120810.DescribeTableReplicaAutoScaling'
    )


class XAmzTarget21(Enum):
    DynamoDB_20120810_DescribeTimeToLive = 'DynamoDB_20120810.DescribeTimeToLive'


class XAmzTarget22(Enum):
    DynamoDB_20120810_DisableKinesisStreamingDestination = (
        'DynamoDB_20120810.DisableKinesisStreamingDestination'
    )


class XAmzTarget23(Enum):
    DynamoDB_20120810_EnableKinesisStreamingDestination = (
        'DynamoDB_20120810.EnableKinesisStreamingDestination'
    )


class XAmzTarget24(Enum):
    DynamoDB_20120810_ExecuteStatement = 'DynamoDB_20120810.ExecuteStatement'


class XAmzTarget25(Enum):
    DynamoDB_20120810_ExecuteTransaction = 'DynamoDB_20120810.ExecuteTransaction'


class XAmzTarget26(Enum):
    DynamoDB_20120810_ExportTableToPointInTime = (
        'DynamoDB_20120810.ExportTableToPointInTime'
    )


class XAmzTarget27(Enum):
    DynamoDB_20120810_GetItem = 'DynamoDB_20120810.GetItem'


class XAmzTarget28(Enum):
    DynamoDB_20120810_ImportTable = 'DynamoDB_20120810.ImportTable'


class XAmzTarget29(Enum):
    DynamoDB_20120810_ListBackups = 'DynamoDB_20120810.ListBackups'


class XAmzTarget30(Enum):
    DynamoDB_20120810_ListContributorInsights = (
        'DynamoDB_20120810.ListContributorInsights'
    )


class XAmzTarget31(Enum):
    DynamoDB_20120810_ListExports = 'DynamoDB_20120810.ListExports'


class XAmzTarget32(Enum):
    DynamoDB_20120810_ListGlobalTables = 'DynamoDB_20120810.ListGlobalTables'


class XAmzTarget33(Enum):
    DynamoDB_20120810_ListImports = 'DynamoDB_20120810.ListImports'


class XAmzTarget34(Enum):
    DynamoDB_20120810_ListTables = 'DynamoDB_20120810.ListTables'


class XAmzTarget35(Enum):
    DynamoDB_20120810_ListTagsOfResource = 'DynamoDB_20120810.ListTagsOfResource'


class XAmzTarget36(Enum):
    DynamoDB_20120810_PutItem = 'DynamoDB_20120810.PutItem'


class XAmzTarget37(Enum):
    DynamoDB_20120810_Query = 'DynamoDB_20120810.Query'


class XAmzTarget38(Enum):
    DynamoDB_20120810_RestoreTableFromBackup = (
        'DynamoDB_20120810.RestoreTableFromBackup'
    )


class XAmzTarget39(Enum):
    DynamoDB_20120810_RestoreTableToPointInTime = (
        'DynamoDB_20120810.RestoreTableToPointInTime'
    )


class XAmzTarget40(Enum):
    DynamoDB_20120810_Scan = 'DynamoDB_20120810.Scan'


class XAmzTarget41(Enum):
    DynamoDB_20120810_TagResource = 'DynamoDB_20120810.TagResource'


class XAmzTarget42(Enum):
    DynamoDB_20120810_TransactGetItems = 'DynamoDB_20120810.TransactGetItems'


class XAmzTarget43(Enum):
    DynamoDB_20120810_TransactWriteItems = 'DynamoDB_20120810.TransactWriteItems'


class XAmzTarget44(Enum):
    DynamoDB_20120810_UntagResource = 'DynamoDB_20120810.UntagResource'


class XAmzTarget45(Enum):
    DynamoDB_20120810_UpdateContinuousBackups = (
        'DynamoDB_20120810.UpdateContinuousBackups'
    )


class XAmzTarget46(Enum):
    DynamoDB_20120810_UpdateContributorInsights = (
        'DynamoDB_20120810.UpdateContributorInsights'
    )


class XAmzTarget47(Enum):
    DynamoDB_20120810_UpdateGlobalTable = 'DynamoDB_20120810.UpdateGlobalTable'


class XAmzTarget48(Enum):
    DynamoDB_20120810_UpdateGlobalTableSettings = (
        'DynamoDB_20120810.UpdateGlobalTableSettings'
    )


class XAmzTarget49(Enum):
    DynamoDB_20120810_UpdateItem = 'DynamoDB_20120810.UpdateItem'


class XAmzTarget50(Enum):
    DynamoDB_20120810_UpdateTable = 'DynamoDB_20120810.UpdateTable'


class XAmzTarget51(Enum):
    DynamoDB_20120810_UpdateTableReplicaAutoScaling = (
        'DynamoDB_20120810.UpdateTableReplicaAutoScaling'
    )


class XAmzTarget52(Enum):
    DynamoDB_20120810_UpdateTimeToLive = 'DynamoDB_20120810.UpdateTimeToLive'


class ArchivalSummary(BaseModel):
    ArchivalBackupArn: Optional[BackupArn] = None
    ArchivalDateTime: Optional[Date] = None
    ArchivalReason_1: Optional[ArchivalReason] = Field(None, alias='ArchivalReason')


class AttributeDefinition(BaseModel):
    AttributeName: KeySchemaAttributeName
    AttributeType: ScalarAttributeType


class AttributeDefinitions(RootModel[List[AttributeDefinition]]):
    root: List[AttributeDefinition]


class AutoScalingTargetTrackingScalingPolicyConfigurationDescription(BaseModel):
    DisableScaleIn: Optional[BooleanObject] = None
    ScaleInCooldown: Optional[IntegerObject] = None
    ScaleOutCooldown: Optional[IntegerObject] = None
    TargetValue: DoubleObject


class AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(BaseModel):
    DisableScaleIn: Optional[BooleanObject] = None
    ScaleInCooldown: Optional[IntegerObject] = None
    ScaleOutCooldown: Optional[IntegerObject] = None
    TargetValue: DoubleObject


class BackupDetails(BaseModel):
    BackupArn_1: BackupArn = Field(..., alias='BackupArn')
    BackupCreationDateTime_1: BackupCreationDateTime = Field(
        ..., alias='BackupCreationDateTime'
    )
    BackupExpiryDateTime: Optional[Date] = None
    BackupName_1: BackupName = Field(..., alias='BackupName')
    BackupSizeBytes_1: Optional[BackupSizeBytes] = Field(None, alias='BackupSizeBytes')
    BackupStatus_1: BackupStatus = Field(..., alias='BackupStatus')
    BackupType_1: BackupType = Field(..., alias='BackupType')


class BackupSummary(BaseModel):
    BackupArn_1: Optional[BackupArn] = Field(None, alias='BackupArn')
    BackupCreationDateTime_1: Optional[BackupCreationDateTime] = Field(
        None, alias='BackupCreationDateTime'
    )
    BackupExpiryDateTime: Optional[Date] = None
    BackupName_1: Optional[BackupName] = Field(None, alias='BackupName')
    BackupSizeBytes_1: Optional[BackupSizeBytes] = Field(None, alias='BackupSizeBytes')
    BackupStatus_1: Optional[BackupStatus] = Field(None, alias='BackupStatus')
    BackupType_1: Optional[BackupType] = Field(None, alias='BackupType')
    TableArn_1: Optional[TableArn] = Field(None, alias='TableArn')
    TableId_1: Optional[TableId] = Field(None, alias='TableId')
    TableName_1: Optional[TableName] = Field(None, alias='TableName')


class BatchStatementError(BaseModel):
    Code: Optional[BatchStatementErrorCodeEnum] = None
    Message: Optional[String] = None


class BillingModeSummary(BaseModel):
    BillingMode_1: Optional[BillingMode] = Field(None, alias='BillingMode')
    LastUpdateToPayPerRequestDateTime: Optional[Date] = None


class Capacity(BaseModel):
    CapacityUnits: Optional[ConsumedCapacityUnits] = None
    ReadCapacityUnits: Optional[ConsumedCapacityUnits] = None
    WriteCapacityUnits: Optional[ConsumedCapacityUnits] = None


class ContributorInsightsSummary(BaseModel):
    ContributorInsightsStatus_1: Optional[ContributorInsightsStatus] = Field(
        None, alias='ContributorInsightsStatus'
    )
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    TableName_1: Optional[TableName] = Field(None, alias='TableName')


class CreateBackupInput(BaseModel):
    BackupName_1: BackupName = Field(..., alias='BackupName')
    TableName_1: TableName = Field(..., alias='TableName')


class CreateBackupOutput(BaseModel):
    BackupDetails_1: Optional[BackupDetails] = Field(None, alias='BackupDetails')


class CreateGlobalTableInput(BaseModel):
    GlobalTableName: TableName
    ReplicationGroup: ReplicaList


class CreateReplicaAction(BaseModel):
    RegionName_1: RegionName = Field(..., alias='RegionName')


class CreateReplicationGroupMemberAction(BaseModel):
    GlobalSecondaryIndexes: Optional[ReplicaGlobalSecondaryIndexList] = None
    KMSMasterKeyId_1: Optional[KMSMasterKeyId] = Field(None, alias='KMSMasterKeyId')
    ProvisionedThroughputOverride_1: Optional[ProvisionedThroughputOverride] = Field(
        None, alias='ProvisionedThroughputOverride'
    )
    RegionName_1: RegionName = Field(..., alias='RegionName')
    TableClassOverride: Optional[TableClass] = None


class DeleteGlobalSecondaryIndexAction(BaseModel):
    IndexName_1: IndexName = Field(..., alias='IndexName')


class DeleteReplicaAction(BaseModel):
    RegionName_1: RegionName = Field(..., alias='RegionName')


class DeleteReplicationGroupMemberAction(BaseModel):
    RegionName_1: RegionName = Field(..., alias='RegionName')


class DeleteTableInput(BaseModel):
    TableName_1: TableName = Field(..., alias='TableName')


class DescribeContinuousBackupsInput(BaseModel):
    TableName_1: TableName = Field(..., alias='TableName')


class DescribeContributorInsightsInput(BaseModel):
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    TableName_1: TableName = Field(..., alias='TableName')


class DescribeContributorInsightsOutput(BaseModel):
    ContributorInsightsRuleList_1: Optional[ContributorInsightsRuleList] = Field(
        None, alias='ContributorInsightsRuleList'
    )
    ContributorInsightsStatus_1: Optional[ContributorInsightsStatus] = Field(
        None, alias='ContributorInsightsStatus'
    )
    FailureException_1: Optional[FailureException] = Field(
        None, alias='FailureException'
    )
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    LastUpdateDateTime_1: Optional[LastUpdateDateTime] = Field(
        None, alias='LastUpdateDateTime'
    )
    TableName_1: Optional[TableName] = Field(None, alias='TableName')


class DescribeExportInput(BaseModel):
    ExportArn_1: ExportArn = Field(..., alias='ExportArn')


class DescribeGlobalTableInput(BaseModel):
    GlobalTableName: TableName


class DescribeGlobalTableSettingsInput(BaseModel):
    GlobalTableName: TableName


class DescribeImportInput(BaseModel):
    ImportArn_1: ImportArn = Field(..., alias='ImportArn')


class DescribeKinesisStreamingDestinationInput(BaseModel):
    TableName_1: TableName = Field(..., alias='TableName')


class DescribeLimitsOutput(BaseModel):
    AccountMaxReadCapacityUnits: Optional[PositiveLongObject] = None
    AccountMaxWriteCapacityUnits: Optional[PositiveLongObject] = None
    TableMaxReadCapacityUnits: Optional[PositiveLongObject] = None
    TableMaxWriteCapacityUnits: Optional[PositiveLongObject] = None


class DescribeTableInput(BaseModel):
    TableName_1: TableName = Field(..., alias='TableName')


class DescribeTableReplicaAutoScalingInput(BaseModel):
    TableName_1: TableName = Field(..., alias='TableName')


class DescribeTimeToLiveInput(BaseModel):
    TableName_1: TableName = Field(..., alias='TableName')


class Endpoint(BaseModel):
    Address: String
    CachePeriodInMinutes: Long


class Endpoints(RootModel[List[Endpoint]]):
    root: List[Endpoint]


class ExportDescription(BaseModel):
    BilledSizeBytes_1: Optional[BilledSizeBytes] = Field(None, alias='BilledSizeBytes')
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    EndTime: Optional[ExportEndTime] = None
    ExportArn_1: Optional[ExportArn] = Field(None, alias='ExportArn')
    ExportFormat_1: Optional[ExportFormat] = Field(None, alias='ExportFormat')
    ExportManifest_1: Optional[ExportManifest] = Field(None, alias='ExportManifest')
    ExportStatus_1: Optional[ExportStatus] = Field(None, alias='ExportStatus')
    ExportTime_1: Optional[ExportTime] = Field(None, alias='ExportTime')
    FailureCode_1: Optional[FailureCode] = Field(None, alias='FailureCode')
    FailureMessage_1: Optional[FailureMessage] = Field(None, alias='FailureMessage')
    ItemCount_1: Optional[ItemCount] = Field(None, alias='ItemCount')
    S3Bucket_1: Optional[S3Bucket] = Field(None, alias='S3Bucket')
    S3BucketOwner_1: Optional[S3BucketOwner] = Field(None, alias='S3BucketOwner')
    S3Prefix_1: Optional[S3Prefix] = Field(None, alias='S3Prefix')
    S3SseAlgorithm_1: Optional[S3SseAlgorithm] = Field(None, alias='S3SseAlgorithm')
    S3SseKmsKeyId_1: Optional[S3SseKmsKeyId] = Field(None, alias='S3SseKmsKeyId')
    StartTime: Optional[ExportStartTime] = None
    TableArn_1: Optional[TableArn] = Field(None, alias='TableArn')
    TableId_1: Optional[TableId] = Field(None, alias='TableId')


class ExportSummaries(RootModel[List[ExportSummary]]):
    root: List[ExportSummary]


class ExportTableToPointInTimeInput(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    ExportFormat_1: Optional[ExportFormat] = Field(None, alias='ExportFormat')
    ExportTime_1: Optional[ExportTime] = Field(None, alias='ExportTime')
    S3Bucket_1: S3Bucket = Field(..., alias='S3Bucket')
    S3BucketOwner_1: Optional[S3BucketOwner] = Field(None, alias='S3BucketOwner')
    S3Prefix_1: Optional[S3Prefix] = Field(None, alias='S3Prefix')
    S3SseAlgorithm_1: Optional[S3SseAlgorithm] = Field(None, alias='S3SseAlgorithm')
    S3SseKmsKeyId_1: Optional[S3SseKmsKeyId] = Field(None, alias='S3SseKmsKeyId')
    TableArn_1: TableArn = Field(..., alias='TableArn')


class ExportTableToPointInTimeOutput(BaseModel):
    ExportDescription_1: Optional[ExportDescription] = Field(
        None, alias='ExportDescription'
    )


class GlobalTable(BaseModel):
    GlobalTableName: Optional[TableName] = None
    ReplicationGroup: Optional[ReplicaList] = None


class GlobalTableList(RootModel[List[GlobalTable]]):
    root: List[GlobalTable]


class KeySchemaElement(BaseModel):
    AttributeName: KeySchemaAttributeName
    KeyType_1: KeyType = Field(..., alias='KeyType')


class KinesisDataStreamDestination(BaseModel):
    DestinationStatus_1: Optional[DestinationStatus] = Field(
        None, alias='DestinationStatus'
    )
    DestinationStatusDescription: Optional[String] = None
    StreamArn_1: Optional[StreamArn] = Field(None, alias='StreamArn')


class KinesisDataStreamDestinations(RootModel[List[KinesisDataStreamDestination]]):
    root: List[KinesisDataStreamDestination]


class KinesisStreamingDestinationInput(BaseModel):
    StreamArn_1: StreamArn = Field(..., alias='StreamArn')
    TableName_1: TableName = Field(..., alias='TableName')


class KinesisStreamingDestinationOutput(BaseModel):
    DestinationStatus_1: Optional[DestinationStatus] = Field(
        None, alias='DestinationStatus'
    )
    StreamArn_1: Optional[StreamArn] = Field(None, alias='StreamArn')
    TableName_1: Optional[TableName] = Field(None, alias='TableName')


class ListBackupsInput(BaseModel):
    BackupType: Optional[BackupTypeFilter] = None
    ExclusiveStartBackupArn: Optional[BackupArn] = None
    Limit: Optional[BackupsInputLimit] = None
    TableName_1: Optional[TableName] = Field(None, alias='TableName')
    TimeRangeLowerBound_1: Optional[TimeRangeLowerBound] = Field(
        None, alias='TimeRangeLowerBound'
    )
    TimeRangeUpperBound_1: Optional[TimeRangeUpperBound] = Field(
        None, alias='TimeRangeUpperBound'
    )


class ListContributorInsightsInput(BaseModel):
    MaxResults: Optional[ListContributorInsightsLimit] = None
    NextToken: Optional[NextTokenString] = None
    TableName_1: Optional[TableName] = Field(None, alias='TableName')


class ListExportsInput(BaseModel):
    MaxResults: Optional[ListExportsMaxLimit] = None
    NextToken: Optional[ExportNextToken] = None
    TableArn_1: Optional[TableArn] = Field(None, alias='TableArn')


class ListExportsOutput(BaseModel):
    ExportSummaries_1: Optional[ExportSummaries] = Field(None, alias='ExportSummaries')
    NextToken: Optional[ExportNextToken] = None


class ListGlobalTablesInput(BaseModel):
    ExclusiveStartGlobalTableName: Optional[TableName] = None
    Limit: Optional[PositiveIntegerObject] = None
    RegionName_1: Optional[RegionName] = Field(None, alias='RegionName')


class ListGlobalTablesOutput(BaseModel):
    GlobalTables: Optional[GlobalTableList] = None
    LastEvaluatedGlobalTableName: Optional[TableName] = None


class ListImportsInput(BaseModel):
    NextToken: Optional[ImportNextToken] = None
    PageSize: Optional[ListImportsMaxLimit] = None
    TableArn_1: Optional[TableArn] = Field(None, alias='TableArn')


class ListTablesInput(BaseModel):
    ExclusiveStartTableName: Optional[TableName] = None
    Limit: Optional[ListTablesInputLimit] = None


class ListTablesOutput(BaseModel):
    LastEvaluatedTableName: Optional[TableName] = None
    TableNames: Optional[TableNameList] = None


class ListTagsOfResourceInput(BaseModel):
    NextToken: Optional[NextTokenString] = None
    ResourceArn: ResourceArnString


class PointInTimeRecoveryDescription(BaseModel):
    EarliestRestorableDateTime: Optional[Date] = None
    LatestRestorableDateTime: Optional[Date] = None
    PointInTimeRecoveryStatus_1: Optional[PointInTimeRecoveryStatus] = Field(
        None, alias='PointInTimeRecoveryStatus'
    )


class Projection(BaseModel):
    NonKeyAttributes: Optional[NonKeyAttributeNameList] = None
    ProjectionType_1: Optional[ProjectionType] = Field(None, alias='ProjectionType')


class ReplicaDescription(BaseModel):
    GlobalSecondaryIndexes: Optional[ReplicaGlobalSecondaryIndexDescriptionList] = None
    KMSMasterKeyId_1: Optional[KMSMasterKeyId] = Field(None, alias='KMSMasterKeyId')
    ProvisionedThroughputOverride_1: Optional[ProvisionedThroughputOverride] = Field(
        None, alias='ProvisionedThroughputOverride'
    )
    RegionName_1: Optional[RegionName] = Field(None, alias='RegionName')
    ReplicaInaccessibleDateTime: Optional[Date] = None
    ReplicaStatus_1: Optional[ReplicaStatus] = Field(None, alias='ReplicaStatus')
    ReplicaStatusDescription_1: Optional[ReplicaStatusDescription] = Field(
        None, alias='ReplicaStatusDescription'
    )
    ReplicaStatusPercentProgress_1: Optional[ReplicaStatusPercentProgress] = Field(
        None, alias='ReplicaStatusPercentProgress'
    )
    ReplicaTableClassSummary: Optional[TableClassSummary] = None


class ReplicaDescriptionList(RootModel[List[ReplicaDescription]]):
    root: List[ReplicaDescription]


class ReplicaUpdate(BaseModel):
    Create: Optional[CreateReplicaAction] = None
    Delete: Optional[DeleteReplicaAction] = None


class ReplicaUpdateList(RootModel[List[ReplicaUpdate]]):
    root: List[ReplicaUpdate]


class ReplicationGroupUpdate(BaseModel):
    Create: Optional[CreateReplicationGroupMemberAction] = None
    Delete: Optional[DeleteReplicationGroupMemberAction] = None
    Update: Optional[UpdateReplicationGroupMemberAction] = None


class ReplicationGroupUpdateList(RootModel[List[ReplicationGroupUpdate]]):
    root: List[ReplicationGroupUpdate] = Field(..., min_length=1)


class RestoreSummary(BaseModel):
    RestoreDateTime: Date
    RestoreInProgress_1: RestoreInProgress = Field(..., alias='RestoreInProgress')
    SourceBackupArn: Optional[BackupArn] = None
    SourceTableArn: Optional[TableArn] = None


class S3BucketSource(BaseModel):
    S3Bucket_1: S3Bucket = Field(..., alias='S3Bucket')
    S3BucketOwner_1: Optional[S3BucketOwner] = Field(None, alias='S3BucketOwner')
    S3KeyPrefix: Optional[S3Prefix] = None


class SSEDescription(BaseModel):
    InaccessibleEncryptionDateTime: Optional[Date] = None
    KMSMasterKeyArn_1: Optional[KMSMasterKeyArn] = Field(None, alias='KMSMasterKeyArn')
    SSEType_1: Optional[SSEType] = Field(None, alias='SSEType')
    Status: Optional[SSEStatus] = None


class SSESpecification(BaseModel):
    Enabled: Optional[SSEEnabled] = None
    KMSMasterKeyId_1: Optional[KMSMasterKeyId] = Field(None, alias='KMSMasterKeyId')
    SSEType_1: Optional[SSEType] = Field(None, alias='SSEType')


class SecondaryIndexesCapacityMap(RootModel[Optional[Dict[str, Capacity]]]):
    root: Optional[Dict[str, Capacity]] = None


class StreamSpecification(BaseModel):
    StreamEnabled_1: StreamEnabled = Field(..., alias='StreamEnabled')
    StreamViewType_1: Optional[StreamViewType] = Field(None, alias='StreamViewType')


class Tag(BaseModel):
    Key: TagKeyString
    Value: TagValueString


class TagKeyList(RootModel[List[TagKeyString]]):
    root: List[TagKeyString]


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceInput(BaseModel):
    ResourceArn: ResourceArnString
    Tags: TagList


class TimeToLiveDescription(BaseModel):
    AttributeName: Optional[TimeToLiveAttributeName] = None
    TimeToLiveStatus_1: Optional[TimeToLiveStatus] = Field(
        None, alias='TimeToLiveStatus'
    )


class UntagResourceInput(BaseModel):
    ResourceArn: ResourceArnString
    TagKeys: TagKeyList


class UpdateGlobalTableInput(BaseModel):
    GlobalTableName: TableName
    ReplicaUpdates: ReplicaUpdateList


class AutoScalingPolicyDescription(BaseModel):
    PolicyName: Optional[AutoScalingPolicyName] = None
    TargetTrackingScalingPolicyConfiguration: Optional[
        AutoScalingTargetTrackingScalingPolicyConfigurationDescription
    ] = None


class AutoScalingPolicyDescriptionList(RootModel[List[AutoScalingPolicyDescription]]):
    root: List[AutoScalingPolicyDescription]


class AutoScalingPolicyUpdate(BaseModel):
    PolicyName: Optional[AutoScalingPolicyName] = None
    TargetTrackingScalingPolicyConfiguration: (
        AutoScalingTargetTrackingScalingPolicyConfigurationUpdate
    )


class AutoScalingSettingsDescription(BaseModel):
    AutoScalingDisabled: Optional[BooleanObject] = None
    AutoScalingRoleArn: Optional[String] = None
    MaximumUnits: Optional[PositiveLongObject] = None
    MinimumUnits: Optional[PositiveLongObject] = None
    ScalingPolicies: Optional[AutoScalingPolicyDescriptionList] = None


class AutoScalingSettingsUpdate(BaseModel):
    AutoScalingDisabled: Optional[BooleanObject] = None
    AutoScalingRoleArn_1: Optional[AutoScalingRoleArn] = Field(
        None, alias='AutoScalingRoleArn'
    )
    MaximumUnits: Optional[PositiveLongObject] = None
    MinimumUnits: Optional[PositiveLongObject] = None
    ScalingPolicyUpdate: Optional[AutoScalingPolicyUpdate] = None


class BackupSummaries(RootModel[List[BackupSummary]]):
    root: List[BackupSummary]


class ConsumedCapacity(BaseModel):
    CapacityUnits: Optional[ConsumedCapacityUnits] = None
    GlobalSecondaryIndexes: Optional[SecondaryIndexesCapacityMap] = None
    LocalSecondaryIndexes: Optional[SecondaryIndexesCapacityMap] = None
    ReadCapacityUnits: Optional[ConsumedCapacityUnits] = None
    Table: Optional[Capacity] = None
    TableName_1: Optional[TableName] = Field(None, alias='TableName')
    WriteCapacityUnits: Optional[ConsumedCapacityUnits] = None


class ConsumedCapacityMultiple(RootModel[List[ConsumedCapacity]]):
    root: List[ConsumedCapacity]


class ContinuousBackupsDescription(BaseModel):
    ContinuousBackupsStatus_1: ContinuousBackupsStatus = Field(
        ..., alias='ContinuousBackupsStatus'
    )
    PointInTimeRecoveryDescription_1: Optional[PointInTimeRecoveryDescription] = Field(
        None, alias='PointInTimeRecoveryDescription'
    )


class ContributorInsightsSummaries(RootModel[List[ContributorInsightsSummary]]):
    root: List[ContributorInsightsSummary]


class DescribeContinuousBackupsOutput(BaseModel):
    ContinuousBackupsDescription_1: Optional[ContinuousBackupsDescription] = Field(
        None, alias='ContinuousBackupsDescription'
    )


class DescribeEndpointsResponse(BaseModel):
    Endpoints_1: Endpoints = Field(..., alias='Endpoints')


class DescribeExportOutput(BaseModel):
    ExportDescription_1: Optional[ExportDescription] = Field(
        None, alias='ExportDescription'
    )


class DescribeKinesisStreamingDestinationOutput(BaseModel):
    KinesisDataStreamDestinations_1: Optional[KinesisDataStreamDestinations] = Field(
        None, alias='KinesisDataStreamDestinations'
    )
    TableName_1: Optional[TableName] = Field(None, alias='TableName')


class DescribeTimeToLiveOutput(BaseModel):
    TimeToLiveDescription_1: Optional[TimeToLiveDescription] = Field(
        None, alias='TimeToLiveDescription'
    )


class GlobalSecondaryIndexAutoScalingUpdate(BaseModel):
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    ProvisionedWriteCapacityAutoScalingUpdate: Optional[AutoScalingSettingsUpdate] = (
        None
    )


class GlobalSecondaryIndexAutoScalingUpdateList(
    RootModel[List[GlobalSecondaryIndexAutoScalingUpdate]]
):
    root: List[GlobalSecondaryIndexAutoScalingUpdate] = Field(..., min_length=1)


class GlobalTableDescription(BaseModel):
    CreationDateTime: Optional[Date] = None
    GlobalTableArn: Optional[GlobalTableArnString] = None
    GlobalTableName: Optional[TableName] = None
    GlobalTableStatus_1: Optional[GlobalTableStatus] = Field(
        None, alias='GlobalTableStatus'
    )
    ReplicationGroup: Optional[ReplicaDescriptionList] = None


class GlobalTableGlobalSecondaryIndexSettingsUpdate(BaseModel):
    IndexName_1: IndexName = Field(..., alias='IndexName')
    ProvisionedWriteCapacityAutoScalingSettingsUpdate: Optional[
        AutoScalingSettingsUpdate
    ] = None
    ProvisionedWriteCapacityUnits: Optional[PositiveLongObject] = None


class GlobalTableGlobalSecondaryIndexSettingsUpdateList(
    RootModel[List[GlobalTableGlobalSecondaryIndexSettingsUpdate]]
):
    root: List[GlobalTableGlobalSecondaryIndexSettingsUpdate] = Field(
        ..., max_length=20, min_length=1
    )


class ImportSummary(BaseModel):
    CloudWatchLogGroupArn_1: Optional[CloudWatchLogGroupArn] = Field(
        None, alias='CloudWatchLogGroupArn'
    )
    EndTime: Optional[ImportEndTime] = None
    ImportArn_1: Optional[ImportArn] = Field(None, alias='ImportArn')
    ImportStatus_1: Optional[ImportStatus] = Field(None, alias='ImportStatus')
    InputFormat_1: Optional[InputFormat] = Field(None, alias='InputFormat')
    S3BucketSource_1: Optional[S3BucketSource] = Field(None, alias='S3BucketSource')
    StartTime: Optional[ImportStartTime] = None
    TableArn_1: Optional[TableArn] = Field(None, alias='TableArn')


class ImportSummaryList(RootModel[List[ImportSummary]]):
    root: List[ImportSummary]


class KeySchema(RootModel[List[KeySchemaElement]]):
    root: List[KeySchemaElement] = Field(..., max_length=2, min_length=1)


class ListBackupsOutput(BaseModel):
    BackupSummaries_1: Optional[BackupSummaries] = Field(None, alias='BackupSummaries')
    LastEvaluatedBackupArn: Optional[BackupArn] = None


class ListContributorInsightsOutput(BaseModel):
    ContributorInsightsSummaries_1: Optional[ContributorInsightsSummaries] = Field(
        None, alias='ContributorInsightsSummaries'
    )
    NextToken: Optional[NextTokenString] = None


class ListImportsOutput(BaseModel):
    ImportSummaryList_1: Optional[ImportSummaryList] = Field(
        None, alias='ImportSummaryList'
    )
    NextToken: Optional[ImportNextToken] = None


class ListTagsOfResourceOutput(BaseModel):
    NextToken: Optional[NextTokenString] = None
    Tags: Optional[TagList] = None


class LocalSecondaryIndex(BaseModel):
    IndexName_1: IndexName = Field(..., alias='IndexName')
    KeySchema_1: KeySchema = Field(..., alias='KeySchema')
    Projection_1: Projection = Field(..., alias='Projection')


class LocalSecondaryIndexDescription(BaseModel):
    IndexArn: Optional[String] = None
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    IndexSizeBytes: Optional[LongObject] = None
    ItemCount: Optional[LongObject] = None
    KeySchema_1: Optional[KeySchema] = Field(None, alias='KeySchema')
    Projection_1: Optional[Projection] = Field(None, alias='Projection')


class LocalSecondaryIndexDescriptionList(
    RootModel[List[LocalSecondaryIndexDescription]]
):
    root: List[LocalSecondaryIndexDescription]


class LocalSecondaryIndexInfo(BaseModel):
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    KeySchema_1: Optional[KeySchema] = Field(None, alias='KeySchema')
    Projection_1: Optional[Projection] = Field(None, alias='Projection')


class LocalSecondaryIndexList(RootModel[List[LocalSecondaryIndex]]):
    root: List[LocalSecondaryIndex]


class LocalSecondaryIndexes(RootModel[List[LocalSecondaryIndexInfo]]):
    root: List[LocalSecondaryIndexInfo]


class ReplicaGlobalSecondaryIndexAutoScalingDescription(BaseModel):
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    IndexStatus_1: Optional[IndexStatus] = Field(None, alias='IndexStatus')
    ProvisionedReadCapacityAutoScalingSettings: Optional[
        AutoScalingSettingsDescription
    ] = None
    ProvisionedWriteCapacityAutoScalingSettings: Optional[
        AutoScalingSettingsDescription
    ] = None


class ReplicaGlobalSecondaryIndexAutoScalingDescriptionList(
    RootModel[List[ReplicaGlobalSecondaryIndexAutoScalingDescription]]
):
    root: List[ReplicaGlobalSecondaryIndexAutoScalingDescription]


class ReplicaGlobalSecondaryIndexAutoScalingUpdate(BaseModel):
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    ProvisionedReadCapacityAutoScalingUpdate: Optional[AutoScalingSettingsUpdate] = None


class ReplicaGlobalSecondaryIndexAutoScalingUpdateList(
    RootModel[List[ReplicaGlobalSecondaryIndexAutoScalingUpdate]]
):
    root: List[ReplicaGlobalSecondaryIndexAutoScalingUpdate]


class ReplicaGlobalSecondaryIndexSettingsDescription(BaseModel):
    IndexName_1: IndexName = Field(..., alias='IndexName')
    IndexStatus_1: Optional[IndexStatus] = Field(None, alias='IndexStatus')
    ProvisionedReadCapacityAutoScalingSettings: Optional[
        AutoScalingSettingsDescription
    ] = None
    ProvisionedReadCapacityUnits: Optional[PositiveLongObject] = None
    ProvisionedWriteCapacityAutoScalingSettings: Optional[
        AutoScalingSettingsDescription
    ] = None
    ProvisionedWriteCapacityUnits: Optional[PositiveLongObject] = None


class ReplicaGlobalSecondaryIndexSettingsDescriptionList(
    RootModel[List[ReplicaGlobalSecondaryIndexSettingsDescription]]
):
    root: List[ReplicaGlobalSecondaryIndexSettingsDescription]


class ReplicaGlobalSecondaryIndexSettingsUpdate(BaseModel):
    IndexName_1: IndexName = Field(..., alias='IndexName')
    ProvisionedReadCapacityAutoScalingSettingsUpdate: Optional[
        AutoScalingSettingsUpdate
    ] = None
    ProvisionedReadCapacityUnits: Optional[PositiveLongObject] = None


class ReplicaGlobalSecondaryIndexSettingsUpdateList(
    RootModel[List[ReplicaGlobalSecondaryIndexSettingsUpdate]]
):
    root: List[ReplicaGlobalSecondaryIndexSettingsUpdate] = Field(
        ..., max_length=20, min_length=1
    )


class ReplicaSettingsDescription(BaseModel):
    RegionName_1: RegionName = Field(..., alias='RegionName')
    ReplicaBillingModeSummary: Optional[BillingModeSummary] = None
    ReplicaGlobalSecondaryIndexSettings: Optional[
        ReplicaGlobalSecondaryIndexSettingsDescriptionList
    ] = None
    ReplicaProvisionedReadCapacityAutoScalingSettings: Optional[
        AutoScalingSettingsDescription
    ] = None
    ReplicaProvisionedReadCapacityUnits: Optional[NonNegativeLongObject] = None
    ReplicaProvisionedWriteCapacityAutoScalingSettings: Optional[
        AutoScalingSettingsDescription
    ] = None
    ReplicaProvisionedWriteCapacityUnits: Optional[NonNegativeLongObject] = None
    ReplicaStatus_1: Optional[ReplicaStatus] = Field(None, alias='ReplicaStatus')
    ReplicaTableClassSummary: Optional[TableClassSummary] = None


class ReplicaSettingsDescriptionList(RootModel[List[ReplicaSettingsDescription]]):
    root: List[ReplicaSettingsDescription]


class ReplicaSettingsUpdate(BaseModel):
    RegionName_1: RegionName = Field(..., alias='RegionName')
    ReplicaGlobalSecondaryIndexSettingsUpdate: Optional[
        ReplicaGlobalSecondaryIndexSettingsUpdateList
    ] = None
    ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate: Optional[
        AutoScalingSettingsUpdate
    ] = None
    ReplicaProvisionedReadCapacityUnits: Optional[PositiveLongObject] = None
    ReplicaTableClass: Optional[TableClass] = None


class ReplicaSettingsUpdateList(RootModel[List[ReplicaSettingsUpdate]]):
    root: List[ReplicaSettingsUpdate] = Field(..., max_length=50, min_length=1)


class SourceTableDetails(BaseModel):
    BillingMode_1: Optional[BillingMode] = Field(None, alias='BillingMode')
    ItemCount_1: Optional[ItemCount] = Field(None, alias='ItemCount')
    KeySchema_1: KeySchema = Field(..., alias='KeySchema')
    ProvisionedThroughput_1: ProvisionedThroughput = Field(
        ..., alias='ProvisionedThroughput'
    )
    TableArn_1: Optional[TableArn] = Field(None, alias='TableArn')
    TableCreationDateTime_1: TableCreationDateTime = Field(
        ..., alias='TableCreationDateTime'
    )
    TableId_1: TableId = Field(..., alias='TableId')
    TableName_1: TableName = Field(..., alias='TableName')
    TableSizeBytes: Optional[LongObject] = None


class UpdateContinuousBackupsOutput(BaseModel):
    ContinuousBackupsDescription_1: Optional[ContinuousBackupsDescription] = Field(
        None, alias='ContinuousBackupsDescription'
    )


class UpdateGlobalTableOutput(BaseModel):
    GlobalTableDescription_1: Optional[GlobalTableDescription] = Field(
        None, alias='GlobalTableDescription'
    )


class UpdateGlobalTableSettingsInput(BaseModel):
    GlobalTableBillingMode: Optional[BillingMode] = None
    GlobalTableGlobalSecondaryIndexSettingsUpdate: Optional[
        GlobalTableGlobalSecondaryIndexSettingsUpdateList
    ] = None
    GlobalTableName: TableName
    GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: Optional[
        AutoScalingSettingsUpdate
    ] = None
    GlobalTableProvisionedWriteCapacityUnits: Optional[PositiveLongObject] = None
    ReplicaSettingsUpdate: Optional[ReplicaSettingsUpdateList] = None


class UpdateGlobalTableSettingsOutput(BaseModel):
    GlobalTableName: Optional[TableName] = None
    ReplicaSettings: Optional[ReplicaSettingsDescriptionList] = None


class CreateGlobalSecondaryIndexAction(BaseModel):
    IndexName_1: IndexName = Field(..., alias='IndexName')
    KeySchema_1: KeySchema = Field(..., alias='KeySchema')
    Projection_1: Projection = Field(..., alias='Projection')
    ProvisionedThroughput_1: Optional[ProvisionedThroughput] = Field(
        None, alias='ProvisionedThroughput'
    )


class CreateGlobalTableOutput(BaseModel):
    GlobalTableDescription_1: Optional[GlobalTableDescription] = Field(
        None, alias='GlobalTableDescription'
    )


class DescribeGlobalTableOutput(BaseModel):
    GlobalTableDescription_1: Optional[GlobalTableDescription] = Field(
        None, alias='GlobalTableDescription'
    )


class DescribeGlobalTableSettingsOutput(BaseModel):
    GlobalTableName: Optional[TableName] = None
    ReplicaSettings: Optional[ReplicaSettingsDescriptionList] = None


class GlobalSecondaryIndex(BaseModel):
    IndexName_1: IndexName = Field(..., alias='IndexName')
    KeySchema_1: KeySchema = Field(..., alias='KeySchema')
    Projection_1: Projection = Field(..., alias='Projection')
    ProvisionedThroughput_1: Optional[ProvisionedThroughput] = Field(
        None, alias='ProvisionedThroughput'
    )


class GlobalSecondaryIndexDescription(BaseModel):
    Backfilling_1: Optional[Backfilling] = Field(None, alias='Backfilling')
    IndexArn: Optional[String] = None
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    IndexSizeBytes: Optional[LongObject] = None
    IndexStatus_1: Optional[IndexStatus] = Field(None, alias='IndexStatus')
    ItemCount: Optional[LongObject] = None
    KeySchema_1: Optional[KeySchema] = Field(None, alias='KeySchema')
    Projection_1: Optional[Projection] = Field(None, alias='Projection')
    ProvisionedThroughput: Optional[ProvisionedThroughputDescription] = None


class GlobalSecondaryIndexDescriptionList(
    RootModel[List[GlobalSecondaryIndexDescription]]
):
    root: List[GlobalSecondaryIndexDescription]


class GlobalSecondaryIndexInfo(BaseModel):
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    KeySchema_1: Optional[KeySchema] = Field(None, alias='KeySchema')
    Projection_1: Optional[Projection] = Field(None, alias='Projection')
    ProvisionedThroughput_1: Optional[ProvisionedThroughput] = Field(
        None, alias='ProvisionedThroughput'
    )


class GlobalSecondaryIndexList(RootModel[List[GlobalSecondaryIndex]]):
    root: List[GlobalSecondaryIndex]


class GlobalSecondaryIndexUpdate(BaseModel):
    Create: Optional[CreateGlobalSecondaryIndexAction] = None
    Delete: Optional[DeleteGlobalSecondaryIndexAction] = None
    Update: Optional[UpdateGlobalSecondaryIndexAction] = None


class GlobalSecondaryIndexUpdateList(RootModel[List[GlobalSecondaryIndexUpdate]]):
    root: List[GlobalSecondaryIndexUpdate]


class GlobalSecondaryIndexes(RootModel[List[GlobalSecondaryIndexInfo]]):
    root: List[GlobalSecondaryIndexInfo]


class ReplicaAutoScalingDescription(BaseModel):
    GlobalSecondaryIndexes: Optional[
        ReplicaGlobalSecondaryIndexAutoScalingDescriptionList
    ] = None
    RegionName_1: Optional[RegionName] = Field(None, alias='RegionName')
    ReplicaProvisionedReadCapacityAutoScalingSettings: Optional[
        AutoScalingSettingsDescription
    ] = None
    ReplicaProvisionedWriteCapacityAutoScalingSettings: Optional[
        AutoScalingSettingsDescription
    ] = None
    ReplicaStatus_1: Optional[ReplicaStatus] = Field(None, alias='ReplicaStatus')


class ReplicaAutoScalingDescriptionList(RootModel[List[ReplicaAutoScalingDescription]]):
    root: List[ReplicaAutoScalingDescription]


class ReplicaAutoScalingUpdate(BaseModel):
    RegionName_1: RegionName = Field(..., alias='RegionName')
    ReplicaGlobalSecondaryIndexUpdates: Optional[
        ReplicaGlobalSecondaryIndexAutoScalingUpdateList
    ] = None
    ReplicaProvisionedReadCapacityAutoScalingUpdate: Optional[
        AutoScalingSettingsUpdate
    ] = None


class ReplicaAutoScalingUpdateList(RootModel[List[ReplicaAutoScalingUpdate]]):
    root: List[ReplicaAutoScalingUpdate] = Field(..., min_length=1)


class RestoreTableFromBackupInput(BaseModel):
    BackupArn_1: BackupArn = Field(..., alias='BackupArn')
    BillingModeOverride: Optional[BillingMode] = None
    GlobalSecondaryIndexOverride: Optional[GlobalSecondaryIndexList] = None
    LocalSecondaryIndexOverride: Optional[LocalSecondaryIndexList] = None
    ProvisionedThroughputOverride: Optional[ProvisionedThroughput] = None
    SSESpecificationOverride: Optional[SSESpecification] = None
    TargetTableName: TableName


class RestoreTableToPointInTimeInput(BaseModel):
    BillingModeOverride: Optional[BillingMode] = None
    GlobalSecondaryIndexOverride: Optional[GlobalSecondaryIndexList] = None
    LocalSecondaryIndexOverride: Optional[LocalSecondaryIndexList] = None
    ProvisionedThroughputOverride: Optional[ProvisionedThroughput] = None
    RestoreDateTime: Optional[Date] = None
    SSESpecificationOverride: Optional[SSESpecification] = None
    SourceTableArn: Optional[TableArn] = None
    SourceTableName: Optional[TableName] = None
    TargetTableName: TableName
    UseLatestRestorableTime: Optional[BooleanObject] = None


class SourceTableFeatureDetails(BaseModel):
    GlobalSecondaryIndexes_1: Optional[GlobalSecondaryIndexes] = Field(
        None, alias='GlobalSecondaryIndexes'
    )
    LocalSecondaryIndexes_1: Optional[LocalSecondaryIndexes] = Field(
        None, alias='LocalSecondaryIndexes'
    )
    SSEDescription_1: Optional[SSEDescription] = Field(None, alias='SSEDescription')
    StreamDescription: Optional[StreamSpecification] = None
    TimeToLiveDescription_1: Optional[TimeToLiveDescription] = Field(
        None, alias='TimeToLiveDescription'
    )


class TableAutoScalingDescription(BaseModel):
    Replicas: Optional[ReplicaAutoScalingDescriptionList] = None
    TableName_1: Optional[TableName] = Field(None, alias='TableName')
    TableStatus_1: Optional[TableStatus] = Field(None, alias='TableStatus')


class TableCreationParameters(BaseModel):
    AttributeDefinitions_1: AttributeDefinitions = Field(
        ..., alias='AttributeDefinitions'
    )
    BillingMode_1: Optional[BillingMode] = Field(None, alias='BillingMode')
    GlobalSecondaryIndexes: Optional[GlobalSecondaryIndexList] = None
    KeySchema_1: KeySchema = Field(..., alias='KeySchema')
    ProvisionedThroughput_1: Optional[ProvisionedThroughput] = Field(
        None, alias='ProvisionedThroughput'
    )
    SSESpecification_1: Optional[SSESpecification] = Field(
        None, alias='SSESpecification'
    )
    TableName_1: TableName = Field(..., alias='TableName')


class TableDescription(BaseModel):
    ArchivalSummary_1: Optional[ArchivalSummary] = Field(None, alias='ArchivalSummary')
    AttributeDefinitions_1: Optional[AttributeDefinitions] = Field(
        None, alias='AttributeDefinitions'
    )
    BillingModeSummary_1: Optional[BillingModeSummary] = Field(
        None, alias='BillingModeSummary'
    )
    CreationDateTime: Optional[Date] = None
    DeletionProtectionEnabled_1: Optional[DeletionProtectionEnabled] = Field(
        None, alias='DeletionProtectionEnabled'
    )
    GlobalSecondaryIndexes: Optional[GlobalSecondaryIndexDescriptionList] = None
    GlobalTableVersion: Optional[String] = None
    ItemCount: Optional[LongObject] = None
    KeySchema_1: Optional[KeySchema] = Field(None, alias='KeySchema')
    LatestStreamArn: Optional[StreamArn] = None
    LatestStreamLabel: Optional[String] = None
    LocalSecondaryIndexes: Optional[LocalSecondaryIndexDescriptionList] = None
    ProvisionedThroughput: Optional[ProvisionedThroughputDescription] = None
    Replicas: Optional[ReplicaDescriptionList] = None
    RestoreSummary_1: Optional[RestoreSummary] = Field(None, alias='RestoreSummary')
    SSEDescription_1: Optional[SSEDescription] = Field(None, alias='SSEDescription')
    StreamSpecification_1: Optional[StreamSpecification] = Field(
        None, alias='StreamSpecification'
    )
    TableArn: Optional[String] = None
    TableClassSummary_1: Optional[TableClassSummary] = Field(
        None, alias='TableClassSummary'
    )
    TableId_1: Optional[TableId] = Field(None, alias='TableId')
    TableName_1: Optional[TableName] = Field(None, alias='TableName')
    TableSizeBytes: Optional[LongObject] = None
    TableStatus_1: Optional[TableStatus] = Field(None, alias='TableStatus')


class UpdateTableInput(BaseModel):
    AttributeDefinitions_1: Optional[AttributeDefinitions] = Field(
        None, alias='AttributeDefinitions'
    )
    BillingMode_1: Optional[BillingMode] = Field(None, alias='BillingMode')
    DeletionProtectionEnabled_1: Optional[DeletionProtectionEnabled] = Field(
        None, alias='DeletionProtectionEnabled'
    )
    GlobalSecondaryIndexUpdates: Optional[GlobalSecondaryIndexUpdateList] = None
    ProvisionedThroughput_1: Optional[ProvisionedThroughput] = Field(
        None, alias='ProvisionedThroughput'
    )
    ReplicaUpdates: Optional[ReplicationGroupUpdateList] = None
    SSESpecification_1: Optional[SSESpecification] = Field(
        None, alias='SSESpecification'
    )
    StreamSpecification_1: Optional[StreamSpecification] = Field(
        None, alias='StreamSpecification'
    )
    TableClass_1: Optional[TableClass] = Field(None, alias='TableClass')
    TableName_1: TableName = Field(..., alias='TableName')


class UpdateTableOutput(BaseModel):
    TableDescription_1: Optional[TableDescription] = Field(
        None, alias='TableDescription'
    )


class UpdateTableReplicaAutoScalingInput(BaseModel):
    GlobalSecondaryIndexUpdates: Optional[GlobalSecondaryIndexAutoScalingUpdateList] = (
        None
    )
    ProvisionedWriteCapacityAutoScalingUpdate: Optional[AutoScalingSettingsUpdate] = (
        None
    )
    ReplicaUpdates: Optional[ReplicaAutoScalingUpdateList] = None
    TableName_1: TableName = Field(..., alias='TableName')


class UpdateTableReplicaAutoScalingOutput(BaseModel):
    TableAutoScalingDescription_1: Optional[TableAutoScalingDescription] = Field(
        None, alias='TableAutoScalingDescription'
    )


class BackupDescription(BaseModel):
    BackupDetails_1: Optional[BackupDetails] = Field(None, alias='BackupDetails')
    SourceTableDetails_1: Optional[SourceTableDetails] = Field(
        None, alias='SourceTableDetails'
    )
    SourceTableFeatureDetails_1: Optional[SourceTableFeatureDetails] = Field(
        None, alias='SourceTableFeatureDetails'
    )


class CreateTableInput(BaseModel):
    AttributeDefinitions_1: AttributeDefinitions = Field(
        ..., alias='AttributeDefinitions'
    )
    BillingMode_1: Optional[BillingMode] = Field(None, alias='BillingMode')
    DeletionProtectionEnabled_1: Optional[DeletionProtectionEnabled] = Field(
        None, alias='DeletionProtectionEnabled'
    )
    GlobalSecondaryIndexes: Optional[GlobalSecondaryIndexList] = None
    KeySchema_1: KeySchema = Field(..., alias='KeySchema')
    LocalSecondaryIndexes: Optional[LocalSecondaryIndexList] = None
    ProvisionedThroughput_1: Optional[ProvisionedThroughput] = Field(
        None, alias='ProvisionedThroughput'
    )
    SSESpecification_1: Optional[SSESpecification] = Field(
        None, alias='SSESpecification'
    )
    StreamSpecification_1: Optional[StreamSpecification] = Field(
        None, alias='StreamSpecification'
    )
    TableClass_1: Optional[TableClass] = Field(None, alias='TableClass')
    TableName_1: TableName = Field(..., alias='TableName')
    Tags: Optional[TagList] = None


class CreateTableOutput(BaseModel):
    TableDescription_1: Optional[TableDescription] = Field(
        None, alias='TableDescription'
    )


class DeleteBackupOutput(BaseModel):
    BackupDescription_1: Optional[BackupDescription] = Field(
        None, alias='BackupDescription'
    )


class DeleteTableOutput(BaseModel):
    TableDescription_1: Optional[TableDescription] = Field(
        None, alias='TableDescription'
    )


class DescribeBackupOutput(BaseModel):
    BackupDescription_1: Optional[BackupDescription] = Field(
        None, alias='BackupDescription'
    )


class DescribeTableOutput(BaseModel):
    Table: Optional[TableDescription] = None


class DescribeTableReplicaAutoScalingOutput(BaseModel):
    TableAutoScalingDescription_1: Optional[TableAutoScalingDescription] = Field(
        None, alias='TableAutoScalingDescription'
    )


class ImportTableDescription(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    CloudWatchLogGroupArn_1: Optional[CloudWatchLogGroupArn] = Field(
        None, alias='CloudWatchLogGroupArn'
    )
    EndTime: Optional[ImportEndTime] = None
    ErrorCount_1: Optional[ErrorCount] = Field(None, alias='ErrorCount')
    FailureCode_1: Optional[FailureCode] = Field(None, alias='FailureCode')
    FailureMessage_1: Optional[FailureMessage] = Field(None, alias='FailureMessage')
    ImportArn_1: Optional[ImportArn] = Field(None, alias='ImportArn')
    ImportStatus_1: Optional[ImportStatus] = Field(None, alias='ImportStatus')
    ImportedItemCount_1: Optional[ImportedItemCount] = Field(
        None, alias='ImportedItemCount'
    )
    InputCompressionType_1: Optional[InputCompressionType] = Field(
        None, alias='InputCompressionType'
    )
    InputFormat_1: Optional[InputFormat] = Field(None, alias='InputFormat')
    InputFormatOptions_1: Optional[InputFormatOptions] = Field(
        None, alias='InputFormatOptions'
    )
    ProcessedItemCount_1: Optional[ProcessedItemCount] = Field(
        None, alias='ProcessedItemCount'
    )
    ProcessedSizeBytes: Optional[LongObject] = None
    S3BucketSource_1: Optional[S3BucketSource] = Field(None, alias='S3BucketSource')
    StartTime: Optional[ImportStartTime] = None
    TableArn_1: Optional[TableArn] = Field(None, alias='TableArn')
    TableCreationParameters_1: Optional[TableCreationParameters] = Field(
        None, alias='TableCreationParameters'
    )
    TableId_1: Optional[TableId] = Field(None, alias='TableId')


class ImportTableInput(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    InputCompressionType_1: Optional[InputCompressionType] = Field(
        None, alias='InputCompressionType'
    )
    InputFormat_1: InputFormat = Field(..., alias='InputFormat')
    InputFormatOptions_1: Optional[InputFormatOptions] = Field(
        None, alias='InputFormatOptions'
    )
    S3BucketSource_1: S3BucketSource = Field(..., alias='S3BucketSource')
    TableCreationParameters_1: TableCreationParameters = Field(
        ..., alias='TableCreationParameters'
    )


class ImportTableOutput(BaseModel):
    ImportTableDescription_1: ImportTableDescription = Field(
        ..., alias='ImportTableDescription'
    )


class RestoreTableFromBackupOutput(BaseModel):
    TableDescription_1: Optional[TableDescription] = Field(
        None, alias='TableDescription'
    )


class RestoreTableToPointInTimeOutput(BaseModel):
    TableDescription_1: Optional[TableDescription] = Field(
        None, alias='TableDescription'
    )


class DescribeImportOutput(BaseModel):
    ImportTableDescription_1: ImportTableDescription = Field(
        ..., alias='ImportTableDescription'
    )


class AttributeMap(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class AttributeUpdates(RootModel[Optional[Dict[str, AttributeValueUpdate]]]):
    root: Optional[Dict[str, AttributeValueUpdate]] = None


class AttributeValue(BaseModel):
    B: Optional[BinaryAttributeValue] = None
    BOOL: Optional[BooleanAttributeValue] = None
    BS: Optional[BinarySetAttributeValue] = None
    L: Optional[ListAttributeValue] = None
    M: Optional[MapAttributeValue] = None
    N: Optional[NumberAttributeValue] = None
    NS: Optional[NumberSetAttributeValue] = None
    NULL: Optional[NullAttributeValue] = None
    S: Optional[StringAttributeValue] = None
    SS: Optional[StringSetAttributeValue] = None


class AttributeValueList(RootModel[List[AttributeValue]]):
    root: List[AttributeValue]


class AttributeValueUpdate(BaseModel):
    Action: Optional[AttributeAction] = None
    Value: Optional[AttributeValue] = None


class BatchExecuteStatementInput(BaseModel):
    ReturnConsumedCapacity_1: Optional[ReturnConsumedCapacity] = Field(
        None, alias='ReturnConsumedCapacity'
    )
    Statements: PartiQLBatchRequest


class BatchExecuteStatementOutput(BaseModel):
    ConsumedCapacity: Optional[ConsumedCapacityMultiple] = None
    Responses: Optional[PartiQLBatchResponse] = None


class BatchGetItemInput(BaseModel):
    RequestItems: BatchGetRequestMap
    ReturnConsumedCapacity_1: Optional[ReturnConsumedCapacity] = Field(
        None, alias='ReturnConsumedCapacity'
    )


class BatchGetItemOutput(BaseModel):
    ConsumedCapacity: Optional[ConsumedCapacityMultiple] = None
    Responses: Optional[BatchGetResponseMap] = None
    UnprocessedKeys: Optional[BatchGetRequestMap] = None


class BatchGetRequestMap(RootModel[Optional[Dict[str, KeysAndAttributes]]]):
    root: Optional[Dict[str, KeysAndAttributes]] = None


class BatchGetResponseMap(RootModel[Optional[Dict[str, ItemList]]]):
    root: Optional[Dict[str, ItemList]] = None


class BatchStatementRequest(BaseModel):
    ConsistentRead_1: Optional[ConsistentRead] = Field(None, alias='ConsistentRead')
    Parameters: Optional[PreparedStatementParameters] = None
    Statement: PartiQLStatement


class BatchStatementResponse(BaseModel):
    Error: Optional[BatchStatementError] = None
    Item: Optional[AttributeMap] = None
    TableName_1: Optional[TableName] = Field(None, alias='TableName')


class BatchWriteItemInput(BaseModel):
    RequestItems: BatchWriteItemRequestMap
    ReturnConsumedCapacity_1: Optional[ReturnConsumedCapacity] = Field(
        None, alias='ReturnConsumedCapacity'
    )
    ReturnItemCollectionMetrics_1: Optional[ReturnItemCollectionMetrics] = Field(
        None, alias='ReturnItemCollectionMetrics'
    )


class BatchWriteItemOutput(BaseModel):
    ConsumedCapacity: Optional[ConsumedCapacityMultiple] = None
    ItemCollectionMetrics: Optional[ItemCollectionMetricsPerTable] = None
    UnprocessedItems: Optional[BatchWriteItemRequestMap] = None


class BatchWriteItemRequestMap(RootModel[Optional[Dict[str, WriteRequests]]]):
    root: Optional[Dict[str, WriteRequests]] = None


class Condition(BaseModel):
    AttributeValueList_1: Optional[AttributeValueList] = Field(
        None, alias='AttributeValueList'
    )
    ComparisonOperator_1: ComparisonOperator = Field(..., alias='ComparisonOperator')


class ConditionCheck(BaseModel):
    ConditionExpression_1: ConditionExpression = Field(..., alias='ConditionExpression')
    ExpressionAttributeNames: Optional[ExpressionAttributeNameMap] = None
    ExpressionAttributeValues: Optional[ExpressionAttributeValueMap] = None
    Key_1: Key = Field(..., alias='Key')
    ReturnValuesOnConditionCheckFailure_1: Optional[
        ReturnValuesOnConditionCheckFailure
    ] = Field(None, alias='ReturnValuesOnConditionCheckFailure')
    TableName_1: TableName = Field(..., alias='TableName')


class Delete(BaseModel):
    ConditionExpression_1: Optional[ConditionExpression] = Field(
        None, alias='ConditionExpression'
    )
    ExpressionAttributeNames: Optional[ExpressionAttributeNameMap] = None
    ExpressionAttributeValues: Optional[ExpressionAttributeValueMap] = None
    Key_1: Key = Field(..., alias='Key')
    ReturnValuesOnConditionCheckFailure_1: Optional[
        ReturnValuesOnConditionCheckFailure
    ] = Field(None, alias='ReturnValuesOnConditionCheckFailure')
    TableName_1: TableName = Field(..., alias='TableName')


class DeleteItemInput(BaseModel):
    ConditionExpression_1: Optional[ConditionExpression] = Field(
        None, alias='ConditionExpression'
    )
    ConditionalOperator_1: Optional[ConditionalOperator] = Field(
        None, alias='ConditionalOperator'
    )
    Expected: Optional[ExpectedAttributeMap] = None
    ExpressionAttributeNames: Optional[ExpressionAttributeNameMap] = None
    ExpressionAttributeValues: Optional[ExpressionAttributeValueMap] = None
    Key_1: Key = Field(..., alias='Key')
    ReturnConsumedCapacity_1: Optional[ReturnConsumedCapacity] = Field(
        None, alias='ReturnConsumedCapacity'
    )
    ReturnItemCollectionMetrics_1: Optional[ReturnItemCollectionMetrics] = Field(
        None, alias='ReturnItemCollectionMetrics'
    )
    ReturnValues: Optional[ReturnValue] = None
    TableName_1: TableName = Field(..., alias='TableName')


class DeleteItemOutput(BaseModel):
    Attributes: Optional[AttributeMap] = None
    ConsumedCapacity_1: Optional[ConsumedCapacity] = Field(
        None, alias='ConsumedCapacity'
    )
    ItemCollectionMetrics_1: Optional[ItemCollectionMetrics] = Field(
        None, alias='ItemCollectionMetrics'
    )


class DeleteRequest(BaseModel):
    Key_1: Key = Field(..., alias='Key')


class ExecuteStatementInput(BaseModel):
    ConsistentRead_1: Optional[ConsistentRead] = Field(None, alias='ConsistentRead')
    Limit: Optional[PositiveIntegerObject] = None
    NextToken: Optional[PartiQLNextToken] = None
    Parameters: Optional[PreparedStatementParameters] = None
    ReturnConsumedCapacity_1: Optional[ReturnConsumedCapacity] = Field(
        None, alias='ReturnConsumedCapacity'
    )
    Statement: PartiQLStatement


class ExecuteStatementOutput(BaseModel):
    ConsumedCapacity_1: Optional[ConsumedCapacity] = Field(
        None, alias='ConsumedCapacity'
    )
    Items: Optional[ItemList] = None
    LastEvaluatedKey: Optional[Key] = None
    NextToken: Optional[PartiQLNextToken] = None


class ExecuteTransactionInput(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    ReturnConsumedCapacity_1: Optional[ReturnConsumedCapacity] = Field(
        None, alias='ReturnConsumedCapacity'
    )
    TransactStatements: ParameterizedStatements


class ExecuteTransactionOutput(BaseModel):
    ConsumedCapacity: Optional[ConsumedCapacityMultiple] = None
    Responses: Optional[ItemResponseList] = None


class ExpectedAttributeMap(RootModel[Optional[Dict[str, ExpectedAttributeValue]]]):
    root: Optional[Dict[str, ExpectedAttributeValue]] = None


class ExpectedAttributeValue(BaseModel):
    AttributeValueList_1: Optional[AttributeValueList] = Field(
        None, alias='AttributeValueList'
    )
    ComparisonOperator_1: Optional[ComparisonOperator] = Field(
        None, alias='ComparisonOperator'
    )
    Exists: Optional[BooleanObject] = None
    Value: Optional[AttributeValue] = None


class ExpressionAttributeValueMap(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class FilterConditionMap(RootModel[Optional[Dict[str, Condition]]]):
    root: Optional[Dict[str, Condition]] = None


class Get(BaseModel):
    ExpressionAttributeNames: Optional[ExpressionAttributeNameMap] = None
    Key_1: Key = Field(..., alias='Key')
    ProjectionExpression_1: Optional[ProjectionExpression] = Field(
        None, alias='ProjectionExpression'
    )
    TableName_1: TableName = Field(..., alias='TableName')


class GetItemInput(BaseModel):
    AttributesToGet: Optional[AttributeNameList] = None
    ConsistentRead_1: Optional[ConsistentRead] = Field(None, alias='ConsistentRead')
    ExpressionAttributeNames: Optional[ExpressionAttributeNameMap] = None
    Key_1: Key = Field(..., alias='Key')
    ProjectionExpression_1: Optional[ProjectionExpression] = Field(
        None, alias='ProjectionExpression'
    )
    ReturnConsumedCapacity_1: Optional[ReturnConsumedCapacity] = Field(
        None, alias='ReturnConsumedCapacity'
    )
    TableName_1: TableName = Field(..., alias='TableName')


class GetItemOutput(BaseModel):
    ConsumedCapacity_1: Optional[ConsumedCapacity] = Field(
        None, alias='ConsumedCapacity'
    )
    Item: Optional[AttributeMap] = None


class ItemCollectionKeyAttributeMap(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class ItemCollectionMetrics(BaseModel):
    ItemCollectionKey: Optional[ItemCollectionKeyAttributeMap] = None
    SizeEstimateRangeGB: Optional[ItemCollectionSizeEstimateRange] = None


class ItemCollectionMetricsMultiple(RootModel[List[ItemCollectionMetrics]]):
    root: List[ItemCollectionMetrics]


class ItemCollectionMetricsPerTable(
    RootModel[Optional[Dict[str, ItemCollectionMetricsMultiple]]]
):
    root: Optional[Dict[str, ItemCollectionMetricsMultiple]] = None


class ItemList(RootModel[List[AttributeMap]]):
    root: List[AttributeMap]


class ItemResponse(BaseModel):
    Item: Optional[AttributeMap] = None


class ItemResponseList(RootModel[List[ItemResponse]]):
    root: List[ItemResponse] = Field(..., max_length=100, min_length=1)


class Key(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class KeyConditions(RootModel[Optional[Dict[str, Condition]]]):
    root: Optional[Dict[str, Condition]] = None


class KeyList(RootModel[List[Key]]):
    root: List[Key] = Field(..., max_length=100, min_length=1)


class KeysAndAttributes(BaseModel):
    AttributesToGet: Optional[AttributeNameList] = None
    ConsistentRead_1: Optional[ConsistentRead] = Field(None, alias='ConsistentRead')
    ExpressionAttributeNames: Optional[ExpressionAttributeNameMap] = None
    Keys: KeyList
    ProjectionExpression_1: Optional[ProjectionExpression] = Field(
        None, alias='ProjectionExpression'
    )


class ListAttributeValue(RootModel[List[AttributeValue]]):
    root: List[AttributeValue]


class MapAttributeValue(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class ParameterizedStatement(BaseModel):
    Parameters: Optional[PreparedStatementParameters] = None
    Statement: PartiQLStatement


class ParameterizedStatements(RootModel[List[ParameterizedStatement]]):
    root: List[ParameterizedStatement] = Field(..., max_length=100, min_length=1)


class PartiQLBatchRequest(RootModel[List[BatchStatementRequest]]):
    root: List[BatchStatementRequest] = Field(..., max_length=25, min_length=1)


class PartiQLBatchResponse(RootModel[List[BatchStatementResponse]]):
    root: List[BatchStatementResponse]


class PreparedStatementParameters(RootModel[List[AttributeValue]]):
    root: List[AttributeValue] = Field(..., min_length=1)


class Put(BaseModel):
    ConditionExpression_1: Optional[ConditionExpression] = Field(
        None, alias='ConditionExpression'
    )
    ExpressionAttributeNames: Optional[ExpressionAttributeNameMap] = None
    ExpressionAttributeValues: Optional[ExpressionAttributeValueMap] = None
    Item: PutItemInputAttributeMap
    ReturnValuesOnConditionCheckFailure_1: Optional[
        ReturnValuesOnConditionCheckFailure
    ] = Field(None, alias='ReturnValuesOnConditionCheckFailure')
    TableName_1: TableName = Field(..., alias='TableName')


class PutItemInput(BaseModel):
    ConditionExpression_1: Optional[ConditionExpression] = Field(
        None, alias='ConditionExpression'
    )
    ConditionalOperator_1: Optional[ConditionalOperator] = Field(
        None, alias='ConditionalOperator'
    )
    Expected: Optional[ExpectedAttributeMap] = None
    ExpressionAttributeNames: Optional[ExpressionAttributeNameMap] = None
    ExpressionAttributeValues: Optional[ExpressionAttributeValueMap] = None
    Item: PutItemInputAttributeMap
    ReturnConsumedCapacity_1: Optional[ReturnConsumedCapacity] = Field(
        None, alias='ReturnConsumedCapacity'
    )
    ReturnItemCollectionMetrics_1: Optional[ReturnItemCollectionMetrics] = Field(
        None, alias='ReturnItemCollectionMetrics'
    )
    ReturnValues: Optional[ReturnValue] = None
    TableName_1: TableName = Field(..., alias='TableName')


class PutItemInputAttributeMap(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class PutItemOutput(BaseModel):
    Attributes: Optional[AttributeMap] = None
    ConsumedCapacity_1: Optional[ConsumedCapacity] = Field(
        None, alias='ConsumedCapacity'
    )
    ItemCollectionMetrics_1: Optional[ItemCollectionMetrics] = Field(
        None, alias='ItemCollectionMetrics'
    )


class PutRequest(BaseModel):
    Item: PutItemInputAttributeMap


class QueryInput(BaseModel):
    AttributesToGet: Optional[AttributeNameList] = None
    ConditionalOperator_1: Optional[ConditionalOperator] = Field(
        None, alias='ConditionalOperator'
    )
    ConsistentRead_1: Optional[ConsistentRead] = Field(None, alias='ConsistentRead')
    ExclusiveStartKey: Optional[Key] = None
    ExpressionAttributeNames: Optional[ExpressionAttributeNameMap] = None
    ExpressionAttributeValues: Optional[ExpressionAttributeValueMap] = None
    FilterExpression: Optional[ConditionExpression] = None
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    KeyConditionExpression: Optional[KeyExpression] = None
    KeyConditions_1: Optional[KeyConditions] = Field(None, alias='KeyConditions')
    Limit: Optional[PositiveIntegerObject] = None
    ProjectionExpression_1: Optional[ProjectionExpression] = Field(
        None, alias='ProjectionExpression'
    )
    QueryFilter: Optional[FilterConditionMap] = None
    ReturnConsumedCapacity_1: Optional[ReturnConsumedCapacity] = Field(
        None, alias='ReturnConsumedCapacity'
    )
    ScanIndexForward: Optional[BooleanObject] = None
    Select_1: Optional[Select] = Field(None, alias='Select')
    TableName_1: TableName = Field(..., alias='TableName')


class QueryOutput(BaseModel):
    ConsumedCapacity_1: Optional[ConsumedCapacity] = Field(
        None, alias='ConsumedCapacity'
    )
    Count: Optional[Integer] = None
    Items: Optional[ItemList] = None
    LastEvaluatedKey: Optional[Key] = None
    ScannedCount: Optional[Integer] = None


class ScanInput(BaseModel):
    AttributesToGet: Optional[AttributeNameList] = None
    ConditionalOperator_1: Optional[ConditionalOperator] = Field(
        None, alias='ConditionalOperator'
    )
    ConsistentRead_1: Optional[ConsistentRead] = Field(None, alias='ConsistentRead')
    ExclusiveStartKey: Optional[Key] = None
    ExpressionAttributeNames: Optional[ExpressionAttributeNameMap] = None
    ExpressionAttributeValues: Optional[ExpressionAttributeValueMap] = None
    FilterExpression: Optional[ConditionExpression] = None
    IndexName_1: Optional[IndexName] = Field(None, alias='IndexName')
    Limit: Optional[PositiveIntegerObject] = None
    ProjectionExpression_1: Optional[ProjectionExpression] = Field(
        None, alias='ProjectionExpression'
    )
    ReturnConsumedCapacity_1: Optional[ReturnConsumedCapacity] = Field(
        None, alias='ReturnConsumedCapacity'
    )
    ScanFilter: Optional[FilterConditionMap] = None
    Segment: Optional[ScanSegment] = None
    Select_1: Optional[Select] = Field(None, alias='Select')
    TableName_1: TableName = Field(..., alias='TableName')
    TotalSegments: Optional[ScanTotalSegments] = None


class ScanOutput(BaseModel):
    ConsumedCapacity_1: Optional[ConsumedCapacity] = Field(
        None, alias='ConsumedCapacity'
    )
    Count: Optional[Integer] = None
    Items: Optional[ItemList] = None
    LastEvaluatedKey: Optional[Key] = None
    ScannedCount: Optional[Integer] = None


class TransactGetItem(BaseModel):
    Get_1: Get = Field(..., alias='Get')


class TransactGetItemList(RootModel[List[TransactGetItem]]):
    root: List[TransactGetItem] = Field(..., max_length=100, min_length=1)


class TransactGetItemsInput(BaseModel):
    ReturnConsumedCapacity_1: Optional[ReturnConsumedCapacity] = Field(
        None, alias='ReturnConsumedCapacity'
    )
    TransactItems: TransactGetItemList


class TransactGetItemsOutput(BaseModel):
    ConsumedCapacity: Optional[ConsumedCapacityMultiple] = None
    Responses: Optional[ItemResponseList] = None


class TransactWriteItem(BaseModel):
    ConditionCheck_1: Optional[ConditionCheck] = Field(None, alias='ConditionCheck')
    Delete_1: Optional[Delete] = Field(None, alias='Delete')
    Put_1: Optional[Put] = Field(None, alias='Put')
    Update_1: Optional[Update] = Field(None, alias='Update')


class TransactWriteItemList(RootModel[List[TransactWriteItem]]):
    root: List[TransactWriteItem] = Field(..., max_length=100, min_length=1)


class TransactWriteItemsInput(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    ReturnConsumedCapacity_1: Optional[ReturnConsumedCapacity] = Field(
        None, alias='ReturnConsumedCapacity'
    )
    ReturnItemCollectionMetrics_1: Optional[ReturnItemCollectionMetrics] = Field(
        None, alias='ReturnItemCollectionMetrics'
    )
    TransactItems: TransactWriteItemList


class TransactWriteItemsOutput(BaseModel):
    ConsumedCapacity: Optional[ConsumedCapacityMultiple] = None
    ItemCollectionMetrics: Optional[ItemCollectionMetricsPerTable] = None


class Update(BaseModel):
    ConditionExpression_1: Optional[ConditionExpression] = Field(
        None, alias='ConditionExpression'
    )
    ExpressionAttributeNames: Optional[ExpressionAttributeNameMap] = None
    ExpressionAttributeValues: Optional[ExpressionAttributeValueMap] = None
    Key_1: Key = Field(..., alias='Key')
    ReturnValuesOnConditionCheckFailure_1: Optional[
        ReturnValuesOnConditionCheckFailure
    ] = Field(None, alias='ReturnValuesOnConditionCheckFailure')
    TableName_1: TableName = Field(..., alias='TableName')
    UpdateExpression_1: UpdateExpression = Field(..., alias='UpdateExpression')


class UpdateItemInput(BaseModel):
    AttributeUpdates_1: Optional[AttributeUpdates] = Field(
        None, alias='AttributeUpdates'
    )
    ConditionExpression_1: Optional[ConditionExpression] = Field(
        None, alias='ConditionExpression'
    )
    ConditionalOperator_1: Optional[ConditionalOperator] = Field(
        None, alias='ConditionalOperator'
    )
    Expected: Optional[ExpectedAttributeMap] = None
    ExpressionAttributeNames: Optional[ExpressionAttributeNameMap] = None
    ExpressionAttributeValues: Optional[ExpressionAttributeValueMap] = None
    Key_1: Key = Field(..., alias='Key')
    ReturnConsumedCapacity_1: Optional[ReturnConsumedCapacity] = Field(
        None, alias='ReturnConsumedCapacity'
    )
    ReturnItemCollectionMetrics_1: Optional[ReturnItemCollectionMetrics] = Field(
        None, alias='ReturnItemCollectionMetrics'
    )
    ReturnValues: Optional[ReturnValue] = None
    TableName_1: TableName = Field(..., alias='TableName')
    UpdateExpression_1: Optional[UpdateExpression] = Field(
        None, alias='UpdateExpression'
    )


class UpdateItemOutput(BaseModel):
    Attributes: Optional[AttributeMap] = None
    ConsumedCapacity_1: Optional[ConsumedCapacity] = Field(
        None, alias='ConsumedCapacity'
    )
    ItemCollectionMetrics_1: Optional[ItemCollectionMetrics] = Field(
        None, alias='ItemCollectionMetrics'
    )


class WriteRequest(BaseModel):
    DeleteRequest_1: Optional[DeleteRequest] = Field(None, alias='DeleteRequest')
    PutRequest_1: Optional[PutRequest] = Field(None, alias='PutRequest')


class WriteRequests(RootModel[List[WriteRequest]]):
    root: List[WriteRequest] = Field(..., max_length=25, min_length=1)


AttributeMap.model_rebuild()
AttributeUpdates.model_rebuild()
AttributeValue.model_rebuild()
BatchExecuteStatementInput.model_rebuild()
BatchExecuteStatementOutput.model_rebuild()
BatchGetItemInput.model_rebuild()
BatchGetItemOutput.model_rebuild()
BatchGetRequestMap.model_rebuild()
BatchGetResponseMap.model_rebuild()
BatchStatementRequest.model_rebuild()
BatchWriteItemInput.model_rebuild()
BatchWriteItemOutput.model_rebuild()
BatchWriteItemRequestMap.model_rebuild()
ConditionCheck.model_rebuild()
Delete.model_rebuild()
DeleteItemInput.model_rebuild()
DeleteItemOutput.model_rebuild()
DeleteRequest.model_rebuild()
ExecuteStatementInput.model_rebuild()
ExecuteStatementOutput.model_rebuild()
ExecuteTransactionInput.model_rebuild()
ExecuteTransactionOutput.model_rebuild()
ExpectedAttributeMap.model_rebuild()
Get.model_rebuild()
GetItemInput.model_rebuild()
ParameterizedStatement.model_rebuild()
Put.model_rebuild()
PutItemInput.model_rebuild()
TransactWriteItem.model_rebuild()
